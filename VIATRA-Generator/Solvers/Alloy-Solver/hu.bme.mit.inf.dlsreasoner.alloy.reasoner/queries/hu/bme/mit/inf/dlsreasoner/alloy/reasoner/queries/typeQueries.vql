package hu.bme.mit.inf.dlsreasoner.alloy.reasoner.queries

import epackage "http://www.bme.hu/mit/inf/dslreasoner/logic/model/language"

private pattern supertypeEdge(type1: Type, type2: Type) {
	Type.supertypes(type1,type2);
}

pattern supertype(type1: Type, type2: Type) {
	type1 == type2;
} or {
	find supertypeEdge+(type1,type2);
}

private pattern commonSubtype(type1: Type, type2: Type, common: Type) {
	find supertype(common,type1);
	find supertype(common,type2);
}

private pattern commonSupertype(type1: Type, type2: Type, common: Type) {
	find supertype(common,type1);
	find supertype(common,type2);
}

private pattern hasHigherCommonSubtype(type1: Type, type2: Type, common: Type, higher: Type) {
	find supertype(higher,type1);
	find supertype(higher,type2);
	Type.supertypes(common,higher);
	higher != common;
}

private pattern hasLowerCommonSupertype(type1: Type, type2: Type, common: Type, lower: Type) {
	find supertype(type1,lower);
	find supertype(type2,lower);
	Type.supertypes(lower,common);
	lower != common;
}

pattern topmostCommonSubtypes(type1: Type, type2: Type, common: Type) {
	find commonSubtype(type1, type2, common);
	neg find hasHigherCommonSubtype(type1, type2, common, _);
}

pattern lowermostCommonSupertype(type1: Type, type2: Type, common: Type) {
	find commonSupertype(type1, type2, common);
	neg find hasLowerCommonSupertype(type1, type2, common, _);
}
/*pattern topmostCommonSubtypesInObject(type1: Type, type2: Type, common: Type) {
	find commonSubtype(type1, type2, common);
	neg find supertypeEdge(type1,_);
	neg find supertypeEdge(type2,_);
	neg find hasHigherCommonSubtype(type1, type2, common, _);
}
pattern topmostCommonSubtypesInType(in: Type, type1: Type, type2: Type, common: Type) {
	find commonSubtype(type1, type2, common);
	find supertypeEdge(type1,in);
	find supertypeEdge(type2,in);
	neg find hasHigherCommonSubtype(type1, type2, common, _);
}
 */

pattern lowestCommonSupertypeOfAllOccuranceOfElement(element: DefinedElement, type: Type) {
	find typeContainsAllOccuranceOfElement(element,type);
	neg find hasLowerCommonSupertypeOfAllOccuranceOfElement(element, type, _);
}

private pattern hasLowerCommonSupertypeOfAllOccuranceOfElement(element: DefinedElement, type: Type, lower: Type) {
	find typeContainsAllOccuranceOfElement(element, type);
	find typeContainsAllOccuranceOfElement(element, lower);
	find supertype(lower, type);
	type != lower;
}

private pattern typeContainsAllOccuranceOfElement(element: DefinedElement, type: Type) {
	find supertype(containerType,type);
	TypeDefinition.elements(containerType,element);
	neg find typeDoesNotCoverElementOccurance(element,type,_);
}

private pattern typeDoesNotCoverElementOccurance(element: DefinedElement, type: Type, uncoveredOccurance: TypeDefinition) {
	find supertype(containerType,type);
	TypeDefinition.elements(containerType,element);
	TypeDefinition.elements(uncoveredOccurance,element);
	neg find supertype(uncoveredOccurance,type);
}