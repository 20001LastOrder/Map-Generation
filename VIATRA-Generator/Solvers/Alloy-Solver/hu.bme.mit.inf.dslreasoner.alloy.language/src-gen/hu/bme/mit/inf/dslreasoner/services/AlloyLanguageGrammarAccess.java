/*
 * generated by Xtext
 */
package hu.bme.mit.inf.dslreasoner.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class AlloyLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ALSDocumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSDocument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cEnumDeclarationsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cEnumDeclarationsALSEnumDeclarationParserRuleCall_0_0_0 = (RuleCall)cEnumDeclarationsAssignment_0_0.eContents().get(0);
		private final Assignment cSignatureBodiesAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cSignatureBodiesALSSignatureBodyParserRuleCall_0_1_0 = (RuleCall)cSignatureBodiesAssignment_0_1.eContents().get(0);
		private final Assignment cFunctionDefinitionsAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cFunctionDefinitionsALSFunctionDefinitionParserRuleCall_0_2_0 = (RuleCall)cFunctionDefinitionsAssignment_0_2.eContents().get(0);
		private final Assignment cRelationDefinitionsAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cRelationDefinitionsALSRelationDefinitionParserRuleCall_0_3_0 = (RuleCall)cRelationDefinitionsAssignment_0_3.eContents().get(0);
		private final Assignment cFactDeclarationsAssignment_0_4 = (Assignment)cAlternatives_0.eContents().get(4);
		private final RuleCall cFactDeclarationsALSFactDeclarationParserRuleCall_0_4_0 = (RuleCall)cFactDeclarationsAssignment_0_4.eContents().get(0);
		private final Assignment cRunCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRunCommandALSRunCommandParserRuleCall_1_0 = (RuleCall)cRunCommandAssignment_1.eContents().get(0);
		
		//ALSDocument:
		//	(enumDeclarations+=ALSEnumDeclaration | signatureBodies+=ALSSignatureBody |
		//	functionDefinitions+=ALSFunctionDefinition | relationDefinitions+=ALSRelationDefinition |
		//	factDeclarations+=ALSFactDeclaration)+
		//	runCommand=ALSRunCommand;
		@Override public ParserRule getRule() { return rule; }

		//(enumDeclarations+=ALSEnumDeclaration | signatureBodies+=ALSSignatureBody | functionDefinitions+=ALSFunctionDefinition |
		//relationDefinitions+=ALSRelationDefinition | factDeclarations+=ALSFactDeclaration)+ runCommand=ALSRunCommand
		public Group getGroup() { return cGroup; }

		//(enumDeclarations+=ALSEnumDeclaration | signatureBodies+=ALSSignatureBody | functionDefinitions+=ALSFunctionDefinition |
		//relationDefinitions+=ALSRelationDefinition | factDeclarations+=ALSFactDeclaration)+
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//enumDeclarations+=ALSEnumDeclaration
		public Assignment getEnumDeclarationsAssignment_0_0() { return cEnumDeclarationsAssignment_0_0; }

		//ALSEnumDeclaration
		public RuleCall getEnumDeclarationsALSEnumDeclarationParserRuleCall_0_0_0() { return cEnumDeclarationsALSEnumDeclarationParserRuleCall_0_0_0; }

		//signatureBodies+=ALSSignatureBody
		public Assignment getSignatureBodiesAssignment_0_1() { return cSignatureBodiesAssignment_0_1; }

		//ALSSignatureBody
		public RuleCall getSignatureBodiesALSSignatureBodyParserRuleCall_0_1_0() { return cSignatureBodiesALSSignatureBodyParserRuleCall_0_1_0; }

		//functionDefinitions+=ALSFunctionDefinition
		public Assignment getFunctionDefinitionsAssignment_0_2() { return cFunctionDefinitionsAssignment_0_2; }

		//ALSFunctionDefinition
		public RuleCall getFunctionDefinitionsALSFunctionDefinitionParserRuleCall_0_2_0() { return cFunctionDefinitionsALSFunctionDefinitionParserRuleCall_0_2_0; }

		//relationDefinitions+=ALSRelationDefinition
		public Assignment getRelationDefinitionsAssignment_0_3() { return cRelationDefinitionsAssignment_0_3; }

		//ALSRelationDefinition
		public RuleCall getRelationDefinitionsALSRelationDefinitionParserRuleCall_0_3_0() { return cRelationDefinitionsALSRelationDefinitionParserRuleCall_0_3_0; }

		//factDeclarations+=ALSFactDeclaration
		public Assignment getFactDeclarationsAssignment_0_4() { return cFactDeclarationsAssignment_0_4; }

		//ALSFactDeclaration
		public RuleCall getFactDeclarationsALSFactDeclarationParserRuleCall_0_4_0() { return cFactDeclarationsALSFactDeclarationParserRuleCall_0_4_0; }

		//runCommand=ALSRunCommand
		public Assignment getRunCommandAssignment_1() { return cRunCommandAssignment_1; }

		//ALSRunCommand
		public RuleCall getRunCommandALSRunCommandParserRuleCall_1_0() { return cRunCommandALSRunCommandParserRuleCall_1_0; }
	}

	public class ALSIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ALSID:
		//	ID;
		@Override public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class ALSRelationDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSRelationDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALSTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALSEnumLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cALSFieldDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cALSVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////////////////////////////////////
		//// ALS types
		////////////////////////////////////
		//ALSRelationDeclaration:
		//	ALSTypeDeclaration | ALSEnumLiteral | ALSFieldDeclaration | ALSVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//ALSTypeDeclaration | ALSEnumLiteral | ALSFieldDeclaration | ALSVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALSTypeDeclaration
		public RuleCall getALSTypeDeclarationParserRuleCall_0() { return cALSTypeDeclarationParserRuleCall_0; }

		//ALSEnumLiteral
		public RuleCall getALSEnumLiteralParserRuleCall_1() { return cALSEnumLiteralParserRuleCall_1; }

		//ALSFieldDeclaration
		public RuleCall getALSFieldDeclarationParserRuleCall_2() { return cALSFieldDeclarationParserRuleCall_2; }

		//ALSVariableDeclaration
		public RuleCall getALSVariableDeclarationParserRuleCall_3() { return cALSVariableDeclarationParserRuleCall_3; }
	}

	public class ALSTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALSEnumDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALSSignatureDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ALSTypeDeclaration:
		//	ALSEnumDeclaration | ALSSignatureDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//ALSEnumDeclaration | ALSSignatureDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALSEnumDeclaration
		public RuleCall getALSEnumDeclarationParserRuleCall_0() { return cALSEnumDeclarationParserRuleCall_0; }

		//ALSSignatureDeclaration
		public RuleCall getALSSignatureDeclarationParserRuleCall_1() { return cALSSignatureDeclarationParserRuleCall_1; }
	}

	public class ALSEnumDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSEnumDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALSIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralALSEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLiteralAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLiteralALSEnumLiteralParserRuleCall_4_1_0 = (RuleCall)cLiteralAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ALSEnumDeclaration:
		//	'enum' name=ALSID '{'
		//	literal+=ALSEnumLiteral ("," literal+=ALSEnumLiteral)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'enum' name=ALSID '{' literal+=ALSEnumLiteral ("," literal+=ALSEnumLiteral)* '}'
		public Group getGroup() { return cGroup; }

		//'enum'
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ALSID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_1_0() { return cNameALSIDParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literal+=ALSEnumLiteral
		public Assignment getLiteralAssignment_3() { return cLiteralAssignment_3; }

		//ALSEnumLiteral
		public RuleCall getLiteralALSEnumLiteralParserRuleCall_3_0() { return cLiteralALSEnumLiteralParserRuleCall_3_0; }

		//("," literal+=ALSEnumLiteral)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//literal+=ALSEnumLiteral
		public Assignment getLiteralAssignment_4_1() { return cLiteralAssignment_4_1; }

		//ALSEnumLiteral
		public RuleCall getLiteralALSEnumLiteralParserRuleCall_4_1_0() { return cLiteralALSEnumLiteralParserRuleCall_4_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ALSEnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSEnumLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameALSIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ALSEnumLiteral:
		//	name=ALSID;
		@Override public ParserRule getRule() { return rule; }

		//name=ALSID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_0() { return cNameALSIDParserRuleCall_0; }
	}

	public class ALSSignatureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSSignatureDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameALSIDParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ALSSignatureDeclaration:
		//	name=ALSID;
		@Override public ParserRule getRule() { return rule; }

		//name=ALSID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_0() { return cNameALSIDParserRuleCall_0; }
	}

	public class ALSSignatureBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSSignatureBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_0 = (UnorderedGroup)cGroup.eContents().get(0);
		private final Assignment cMultiplicityAssignment_0_0 = (Assignment)cUnorderedGroup_0.eContents().get(0);
		private final RuleCall cMultiplicityALSMultiplicityEnumRuleCall_0_0_0 = (RuleCall)cMultiplicityAssignment_0_0.eContents().get(0);
		private final Assignment cAbstractAssignment_0_1 = (Assignment)cUnorderedGroup_0.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0_1_0 = (Keyword)cAbstractAssignment_0_1.eContents().get(0);
		private final Keyword cSigKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsALSSignatureDeclarationParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDeclarationsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDeclarationsALSSignatureDeclarationParserRuleCall_3_1_0 = (RuleCall)cDeclarationsAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cExtendsKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cSupertypeAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final CrossReference cSupertypeALSSignatureDeclarationCrossReference_4_0_1_0 = (CrossReference)cSupertypeAssignment_4_0_1.eContents().get(0);
		private final RuleCall cSupertypeALSSignatureDeclarationIDTerminalRuleCall_4_0_1_0_1 = (RuleCall)cSupertypeALSSignatureDeclarationCrossReference_4_0_1_0.eContents().get(1);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Keyword cInKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSupersetAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final CrossReference cSupersetALSSignatureDeclarationCrossReference_4_1_1_0 = (CrossReference)cSupersetAssignment_4_1_1.eContents().get(0);
		private final RuleCall cSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_1_0_1 = (RuleCall)cSupersetALSSignatureDeclarationCrossReference_4_1_1_0.eContents().get(1);
		private final Group cGroup_4_1_2 = (Group)cGroup_4_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_4_1_2_0 = (Keyword)cGroup_4_1_2.eContents().get(0);
		private final Assignment cSupersetAssignment_4_1_2_1 = (Assignment)cGroup_4_1_2.eContents().get(1);
		private final CrossReference cSupersetALSSignatureDeclarationCrossReference_4_1_2_1_0 = (CrossReference)cSupersetAssignment_4_1_2_1.eContents().get(0);
		private final RuleCall cSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_2_1_0_1 = (RuleCall)cSupersetALSSignatureDeclarationCrossReference_4_1_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cFieldsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cFieldsALSFieldDeclarationParserRuleCall_6_0_0 = (RuleCall)cFieldsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cFieldsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cFieldsALSFieldDeclarationParserRuleCall_6_1_1_0 = (RuleCall)cFieldsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ALSSignatureBody:
		//	(multiplicity=ALSMultiplicity? & abstract?='abstract'?)
		//	'sig'
		//	declarations+=ALSSignatureDeclaration (',' declarations+=ALSSignatureDeclaration)* ('extends'
		//	supertype=[ALSSignatureDeclaration] | 'in' superset+=[ALSSignatureDeclaration] ('+'
		//	superset+=[ALSSignatureDeclaration])*)?
		//	'{' (fields+=ALSFieldDeclaration ("," fields+=ALSFieldDeclaration)*)? '}';
		@Override public ParserRule getRule() { return rule; }

		//(multiplicity=ALSMultiplicity? & abstract?='abstract'?) 'sig' declarations+=ALSSignatureDeclaration (','
		//declarations+=ALSSignatureDeclaration)* ('extends' supertype=[ALSSignatureDeclaration] | 'in'
		//superset+=[ALSSignatureDeclaration] ('+' superset+=[ALSSignatureDeclaration])*)? '{' (fields+=ALSFieldDeclaration (","
		//fields+=ALSFieldDeclaration)*)? '}'
		public Group getGroup() { return cGroup; }

		//multiplicity=ALSMultiplicity? & abstract?='abstract'?
		public UnorderedGroup getUnorderedGroup_0() { return cUnorderedGroup_0; }

		//multiplicity=ALSMultiplicity?
		public Assignment getMultiplicityAssignment_0_0() { return cMultiplicityAssignment_0_0; }

		//ALSMultiplicity
		public RuleCall getMultiplicityALSMultiplicityEnumRuleCall_0_0_0() { return cMultiplicityALSMultiplicityEnumRuleCall_0_0_0; }

		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_1() { return cAbstractAssignment_0_1; }

		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_0() { return cAbstractAbstractKeyword_0_1_0; }

		//'sig'
		public Keyword getSigKeyword_1() { return cSigKeyword_1; }

		//declarations+=ALSSignatureDeclaration
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }

		//ALSSignatureDeclaration
		public RuleCall getDeclarationsALSSignatureDeclarationParserRuleCall_2_0() { return cDeclarationsALSSignatureDeclarationParserRuleCall_2_0; }

		//(',' declarations+=ALSSignatureDeclaration)*
		public Group getGroup_3() { return cGroup_3; }

		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//declarations+=ALSSignatureDeclaration
		public Assignment getDeclarationsAssignment_3_1() { return cDeclarationsAssignment_3_1; }

		//ALSSignatureDeclaration
		public RuleCall getDeclarationsALSSignatureDeclarationParserRuleCall_3_1_0() { return cDeclarationsALSSignatureDeclarationParserRuleCall_3_1_0; }

		//('extends' supertype=[ALSSignatureDeclaration] | 'in' superset+=[ALSSignatureDeclaration] ('+'
		//superset+=[ALSSignatureDeclaration])*)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//'extends' supertype=[ALSSignatureDeclaration]
		public Group getGroup_4_0() { return cGroup_4_0; }

		//'extends'
		public Keyword getExtendsKeyword_4_0_0() { return cExtendsKeyword_4_0_0; }

		//supertype=[ALSSignatureDeclaration]
		public Assignment getSupertypeAssignment_4_0_1() { return cSupertypeAssignment_4_0_1; }

		//[ALSSignatureDeclaration]
		public CrossReference getSupertypeALSSignatureDeclarationCrossReference_4_0_1_0() { return cSupertypeALSSignatureDeclarationCrossReference_4_0_1_0; }

		//ID
		public RuleCall getSupertypeALSSignatureDeclarationIDTerminalRuleCall_4_0_1_0_1() { return cSupertypeALSSignatureDeclarationIDTerminalRuleCall_4_0_1_0_1; }

		//'in' superset+=[ALSSignatureDeclaration] ('+' superset+=[ALSSignatureDeclaration])*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//'in'
		public Keyword getInKeyword_4_1_0() { return cInKeyword_4_1_0; }

		//superset+=[ALSSignatureDeclaration]
		public Assignment getSupersetAssignment_4_1_1() { return cSupersetAssignment_4_1_1; }

		//[ALSSignatureDeclaration]
		public CrossReference getSupersetALSSignatureDeclarationCrossReference_4_1_1_0() { return cSupersetALSSignatureDeclarationCrossReference_4_1_1_0; }

		//ID
		public RuleCall getSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_1_0_1() { return cSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_1_0_1; }

		//('+' superset+=[ALSSignatureDeclaration])*
		public Group getGroup_4_1_2() { return cGroup_4_1_2; }

		//'+'
		public Keyword getPlusSignKeyword_4_1_2_0() { return cPlusSignKeyword_4_1_2_0; }

		//superset+=[ALSSignatureDeclaration]
		public Assignment getSupersetAssignment_4_1_2_1() { return cSupersetAssignment_4_1_2_1; }

		//[ALSSignatureDeclaration]
		public CrossReference getSupersetALSSignatureDeclarationCrossReference_4_1_2_1_0() { return cSupersetALSSignatureDeclarationCrossReference_4_1_2_1_0; }

		//ID
		public RuleCall getSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_2_1_0_1() { return cSupersetALSSignatureDeclarationIDTerminalRuleCall_4_1_2_1_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(fields+=ALSFieldDeclaration ("," fields+=ALSFieldDeclaration)*)?
		public Group getGroup_6() { return cGroup_6; }

		//fields+=ALSFieldDeclaration
		public Assignment getFieldsAssignment_6_0() { return cFieldsAssignment_6_0; }

		//ALSFieldDeclaration
		public RuleCall getFieldsALSFieldDeclarationParserRuleCall_6_0_0() { return cFieldsALSFieldDeclarationParserRuleCall_6_0_0; }

		//("," fields+=ALSFieldDeclaration)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//fields+=ALSFieldDeclaration
		public Assignment getFieldsAssignment_6_1_1() { return cFieldsAssignment_6_1_1; }

		//ALSFieldDeclaration
		public RuleCall getFieldsALSFieldDeclarationParserRuleCall_6_1_1_0() { return cFieldsALSFieldDeclarationParserRuleCall_6_1_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ALSFieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSFieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameALSIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityALSMultiplicityEnumRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeALSTermParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//ALSFieldDeclaration:
		//	name=ALSID ':' multiplicity=ALSMultiplicity? type=ALSTerm;
		@Override public ParserRule getRule() { return rule; }

		//name=ALSID ':' multiplicity=ALSMultiplicity? type=ALSTerm
		public Group getGroup() { return cGroup; }

		//name=ALSID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_0_0() { return cNameALSIDParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//multiplicity=ALSMultiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }

		//ALSMultiplicity
		public RuleCall getMultiplicityALSMultiplicityEnumRuleCall_2_0() { return cMultiplicityALSMultiplicityEnumRuleCall_2_0; }

		//type=ALSTerm
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ALSTerm
		public RuleCall getTypeALSTermParserRuleCall_3_0() { return cTypeALSTermParserRuleCall_3_0; }
	}

	public class ALSDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALSFunctionDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALSRelationDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ALSDefinition:
		//	ALSFunctionDefinition | ALSRelationDefinition;
		@Override public ParserRule getRule() { return rule; }

		//ALSFunctionDefinition | ALSRelationDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALSFunctionDefinition
		public RuleCall getALSFunctionDefinitionParserRuleCall_0() { return cALSFunctionDefinitionParserRuleCall_0; }

		//ALSRelationDefinition
		public RuleCall getALSRelationDefinitionParserRuleCall_1() { return cALSRelationDefinitionParserRuleCall_1; }
	}

	public class ALSFunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSFunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALSIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeALSTermParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cValueAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cValueALSTermParserRuleCall_9_0 = (RuleCall)cValueAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//ALSFunctionDefinition:
		//	"fun" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]" ":" type=ALSTerm
		//	"{" value=ALSTerm "}";
		@Override public ParserRule getRule() { return rule; }

		//"fun" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]" ":" type=ALSTerm "{"
		//value=ALSTerm "}"
		public Group getGroup() { return cGroup; }

		//"fun"
		public Keyword getFunKeyword_0() { return cFunKeyword_0; }

		//name=ALSID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_1_0() { return cNameALSIDParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_3_0() { return cVariablesALSVariableDeclarationParserRuleCall_3_0; }

		//(',' variables+=ALSVariableDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_4_1_0() { return cVariablesALSVariableDeclarationParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//type=ALSTerm
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//ALSTerm
		public RuleCall getTypeALSTermParserRuleCall_7_0() { return cTypeALSTermParserRuleCall_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//value=ALSTerm
		public Assignment getValueAssignment_9() { return cValueAssignment_9; }

		//ALSTerm
		public RuleCall getValueALSTermParserRuleCall_9_0() { return cValueALSTermParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ALSRelationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSRelationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameALSIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cValueAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cValueALSTermParserRuleCall_7_0 = (RuleCall)cValueAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ALSRelationDefinition:
		//	"pred" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]"
		//	"{" value=ALSTerm "}";
		@Override public ParserRule getRule() { return rule; }

		//"pred" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]" "{" value=ALSTerm
		//"}"
		public Group getGroup() { return cGroup; }

		//"pred"
		public Keyword getPredKeyword_0() { return cPredKeyword_0; }

		//name=ALSID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_1_0() { return cNameALSIDParserRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_3_0() { return cVariablesALSVariableDeclarationParserRuleCall_3_0; }

		//(',' variables+=ALSVariableDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_4_1_0() { return cVariablesALSVariableDeclarationParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//value=ALSTerm
		public Assignment getValueAssignment_7() { return cValueAssignment_7; }

		//ALSTerm
		public RuleCall getValueALSTermParserRuleCall_7_0() { return cValueALSTermParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ALSFactDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSFactDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cALSFactDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFactKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameALSIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTermAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTermALSTermParserRuleCall_4_0 = (RuleCall)cTermAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ALSFactDeclaration:
		//	{ALSFactDeclaration} 'fact' name=ALSID? '{' term=ALSTerm '}';
		@Override public ParserRule getRule() { return rule; }

		//{ALSFactDeclaration} 'fact' name=ALSID? '{' term=ALSTerm '}'
		public Group getGroup() { return cGroup; }

		//{ALSFactDeclaration}
		public Action getALSFactDeclarationAction_0() { return cALSFactDeclarationAction_0; }

		//'fact'
		public Keyword getFactKeyword_1() { return cFactKeyword_1; }

		//name=ALSID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_2_0() { return cNameALSIDParserRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//term=ALSTerm
		public Assignment getTermAssignment_4() { return cTermAssignment_4; }

		//ALSTerm
		public RuleCall getTermALSTermParserRuleCall_4_0() { return cTermALSTermParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ALSTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSTerm");
		private final RuleCall cALSQuantifiedParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////////////////////////////////////
		//// ALS terms
		////////////////////////////////////
		//ALSTerm:
		//	ALSQuantified;
		@Override public ParserRule getRule() { return rule; }

		//ALSQuantified
		public RuleCall getALSQuantifiedParserRuleCall() { return cALSQuantifiedParserRuleCall; }
	}

	public class ALSQuantifiedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSQuantified");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cALSQuantifiedExAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTypeALSMultiplicityEnumRuleCall_0_1_0 = (RuleCall)cTypeAssignment_0_1.eContents().get(0);
		private final Assignment cDisjAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final Keyword cDisjDisjKeyword_0_2_0 = (Keyword)cDisjAssignment_0_2.eContents().get(0);
		private final Assignment cVariablesAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_0_3_0 = (RuleCall)cVariablesAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cVariablesAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_0_4_1_0 = (RuleCall)cVariablesAssignment_0_4_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cExpressionAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cExpressionALSTermParserRuleCall_0_6_0 = (RuleCall)cExpressionAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final RuleCall cALSOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ALSQuantified ALSTerm:
		//	{ALSQuantifiedEx} type=ALSMultiplicity
		//	disj?='disj'? variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' |
		//	ALSOr;
		@Override public ParserRule getRule() { return rule; }

		//{ALSQuantifiedEx} type=ALSMultiplicity disj?='disj'? variables+=ALSVariableDeclaration (','
		//variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' | ALSOr
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ALSQuantifiedEx} type=ALSMultiplicity disj?='disj'? variables+=ALSVariableDeclaration (','
		//variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}'
		public Group getGroup_0() { return cGroup_0; }

		//{ALSQuantifiedEx}
		public Action getALSQuantifiedExAction_0_0() { return cALSQuantifiedExAction_0_0; }

		//type=ALSMultiplicity
		public Assignment getTypeAssignment_0_1() { return cTypeAssignment_0_1; }

		//ALSMultiplicity
		public RuleCall getTypeALSMultiplicityEnumRuleCall_0_1_0() { return cTypeALSMultiplicityEnumRuleCall_0_1_0; }

		//disj?='disj'?
		public Assignment getDisjAssignment_0_2() { return cDisjAssignment_0_2; }

		//'disj'
		public Keyword getDisjDisjKeyword_0_2_0() { return cDisjDisjKeyword_0_2_0; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_0_3() { return cVariablesAssignment_0_3; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_0_3_0() { return cVariablesALSVariableDeclarationParserRuleCall_0_3_0; }

		//(',' variables+=ALSVariableDeclaration)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_0_4_1() { return cVariablesAssignment_0_4_1; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_0_4_1_0() { return cVariablesALSVariableDeclarationParserRuleCall_0_4_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }

		//expression=ALSTerm
		public Assignment getExpressionAssignment_0_6() { return cExpressionAssignment_0_6; }

		//ALSTerm
		public RuleCall getExpressionALSTermParserRuleCall_0_6_0() { return cExpressionALSTermParserRuleCall_0_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }

		//ALSOr
		public RuleCall getALSOrParserRuleCall_1() { return cALSOrParserRuleCall_1; }
	}

	public class ALSOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSIffParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSOrLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSIffParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSOr ALSTerm:
		//	ALSIff ({ALSOr.leftOperand=current} ("||" | "or") rightOperand=ALSIff)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSIff ({ALSOr.leftOperand=current} ("||" | "or") rightOperand=ALSIff)?
		public Group getGroup() { return cGroup; }

		//ALSIff
		public RuleCall getALSIffParserRuleCall_0() { return cALSIffParserRuleCall_0; }

		//({ALSOr.leftOperand=current} ("||" | "or") rightOperand=ALSIff)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSOr.leftOperand=current}
		public Action getALSOrLeftOperandAction_1_0() { return cALSOrLeftOperandAction_1_0; }

		//"||" | "or"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0() { return cVerticalLineVerticalLineKeyword_1_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1_1() { return cOrKeyword_1_1_1; }

		//rightOperand=ALSIff
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSIff
		public RuleCall getRightOperandALSIffParserRuleCall_1_2_0() { return cRightOperandALSIffParserRuleCall_1_2_0; }
	}

	public class ALSIffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSIff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSImplParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSIffLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cIffKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSImplParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSIff ALSTerm:
		//	ALSImpl ({ALSIff.leftOperand=current} ("<=>" | "iff") rightOperand=ALSImpl)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSImpl ({ALSIff.leftOperand=current} ("<=>" | "iff") rightOperand=ALSImpl)?
		public Group getGroup() { return cGroup; }

		//ALSImpl
		public RuleCall getALSImplParserRuleCall_0() { return cALSImplParserRuleCall_0; }

		//({ALSIff.leftOperand=current} ("<=>" | "iff") rightOperand=ALSImpl)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSIff.leftOperand=current}
		public Action getALSIffLeftOperandAction_1_0() { return cALSIffLeftOperandAction_1_0; }

		//"<=>" | "iff"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"<=>"
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0() { return cLessThanSignEqualsSignGreaterThanSignKeyword_1_1_0; }

		//"iff"
		public Keyword getIffKeyword_1_1_1() { return cIffKeyword_1_1_1; }

		//rightOperand=ALSImpl
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSImpl
		public RuleCall getRightOperandALSImplParserRuleCall_1_2_0() { return cRightOperandALSImplParserRuleCall_1_2_0; }
	}

	public class ALSImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSImplLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cImpliesKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSAndParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cElseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cElseOperandAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cElseOperandALSAndParserRuleCall_1_3_1_0 = (RuleCall)cElseOperandAssignment_1_3_1.eContents().get(0);
		
		//ALSImpl ALSTerm:
		//	ALSAnd ({ALSImpl.leftOperand=current} ("=>" | "implies") rightOperand=ALSAnd ('else' elseOperand=ALSAnd)?)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSAnd ({ALSImpl.leftOperand=current} ("=>" | "implies") rightOperand=ALSAnd ('else' elseOperand=ALSAnd)?)?
		public Group getGroup() { return cGroup; }

		//ALSAnd
		public RuleCall getALSAndParserRuleCall_0() { return cALSAndParserRuleCall_0; }

		//({ALSImpl.leftOperand=current} ("=>" | "implies") rightOperand=ALSAnd ('else' elseOperand=ALSAnd)?)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSImpl.leftOperand=current}
		public Action getALSImplLeftOperandAction_1_0() { return cALSImplLeftOperandAction_1_0; }

		//"=>" | "implies"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_1_0() { return cEqualsSignGreaterThanSignKeyword_1_1_0; }

		//"implies"
		public Keyword getImpliesKeyword_1_1_1() { return cImpliesKeyword_1_1_1; }

		//rightOperand=ALSAnd
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSAnd
		public RuleCall getRightOperandALSAndParserRuleCall_1_2_0() { return cRightOperandALSAndParserRuleCall_1_2_0; }

		//('else' elseOperand=ALSAnd)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//'else'
		public Keyword getElseKeyword_1_3_0() { return cElseKeyword_1_3_0; }

		//elseOperand=ALSAnd
		public Assignment getElseOperandAssignment_1_3_1() { return cElseOperandAssignment_1_3_1; }

		//ALSAnd
		public RuleCall getElseOperandALSAndParserRuleCall_1_3_1_0() { return cElseOperandALSAndParserRuleCall_1_3_1_0; }
	}

	public class ALSAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSAndLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSComparisonParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSAnd ALSTerm:
		//	ALSComparison ({ALSAnd.leftOperand=current} ("&&" | "and") rightOperand=ALSComparison)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSComparison ({ALSAnd.leftOperand=current} ("&&" | "and") rightOperand=ALSComparison)?
		public Group getGroup() { return cGroup; }

		//ALSComparison
		public RuleCall getALSComparisonParserRuleCall_0() { return cALSComparisonParserRuleCall_0; }

		//({ALSAnd.leftOperand=current} ("&&" | "and") rightOperand=ALSComparison)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSAnd.leftOperand=current}
		public Action getALSAndLeftOperandAction_1_0() { return cALSAndLeftOperandAction_1_0; }

		//"&&" | "and"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1_0() { return cAmpersandAmpersandKeyword_1_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1_1() { return cAndKeyword_1_1_1; }

		//rightOperand=ALSComparison
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSComparison
		public RuleCall getRightOperandALSComparisonParserRuleCall_1_2_0() { return cRightOperandALSComparisonParserRuleCall_1_2_0; }
	}

	public class ALSComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSComparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSOverrideParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cALSEqualsLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cALSNotEqualsLeftOperandAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Group cGroup_1_0_2 = (Group)cAlternatives_1_0.eContents().get(2);
		private final Action cALSSubsetLeftOperandAction_1_0_2_0 = (Action)cGroup_1_0_2.eContents().get(0);
		private final Keyword cInKeyword_1_0_2_1 = (Keyword)cGroup_1_0_2.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cAlternatives_1_0.eContents().get(3);
		private final Action cALSLessLeftOperandAction_1_0_3_0 = (Action)cGroup_1_0_3.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_3_1 = (Keyword)cGroup_1_0_3.eContents().get(1);
		private final Group cGroup_1_0_4 = (Group)cAlternatives_1_0.eContents().get(4);
		private final Action cALSLeqLeftOperandAction_1_0_4_0 = (Action)cGroup_1_0_4.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_0_4_1 = (Keyword)cGroup_1_0_4.eContents().get(1);
		private final Group cGroup_1_0_5 = (Group)cAlternatives_1_0.eContents().get(5);
		private final Action cALSMoreLeftOperandAction_1_0_5_0 = (Action)cGroup_1_0_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_5_1 = (Keyword)cGroup_1_0_5.eContents().get(1);
		private final Group cGroup_1_0_6 = (Group)cAlternatives_1_0.eContents().get(6);
		private final Action cALSMeqLeftOperandAction_1_0_6_0 = (Action)cGroup_1_0_6.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_1_0_6_1 = (Keyword)cGroup_1_0_6.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandALSOverrideParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ALSComparison ALSTerm:
		//	ALSOverride (({ALSEquals.leftOperand=current} "=" | {ALSNotEquals.leftOperand=current} "!=" |
		//	{ALSSubset.leftOperand=current} "in" | {ALSLess.leftOperand=current} ">" | {ALSLeq.leftOperand=current} ">=" |
		//	{ALSMore.leftOperand=current} "<" | {ALSMeq.leftOperand=current} "<=") rightOperand=ALSOverride)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSOverride (({ALSEquals.leftOperand=current} "=" | {ALSNotEquals.leftOperand=current} "!=" |
		//{ALSSubset.leftOperand=current} "in" | {ALSLess.leftOperand=current} ">" | {ALSLeq.leftOperand=current} ">=" |
		//{ALSMore.leftOperand=current} "<" | {ALSMeq.leftOperand=current} "<=") rightOperand=ALSOverride)?
		public Group getGroup() { return cGroup; }

		//ALSOverride
		public RuleCall getALSOverrideParserRuleCall_0() { return cALSOverrideParserRuleCall_0; }

		//(({ALSEquals.leftOperand=current} "=" | {ALSNotEquals.leftOperand=current} "!=" | {ALSSubset.leftOperand=current} "in" |
		//{ALSLess.leftOperand=current} ">" | {ALSLeq.leftOperand=current} ">=" | {ALSMore.leftOperand=current} "<" |
		//{ALSMeq.leftOperand=current} "<=") rightOperand=ALSOverride)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSEquals.leftOperand=current} "=" | {ALSNotEquals.leftOperand=current} "!=" | {ALSSubset.leftOperand=current} "in" |
		//{ALSLess.leftOperand=current} ">" | {ALSLeq.leftOperand=current} ">=" | {ALSMore.leftOperand=current} "<" |
		//{ALSMeq.leftOperand=current} "<="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{ALSEquals.leftOperand=current} "="
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ALSEquals.leftOperand=current}
		public Action getALSEqualsLeftOperandAction_1_0_0_0() { return cALSEqualsLeftOperandAction_1_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0_1() { return cEqualsSignKeyword_1_0_0_1; }

		//{ALSNotEquals.leftOperand=current} "!="
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ALSNotEquals.leftOperand=current}
		public Action getALSNotEqualsLeftOperandAction_1_0_1_0() { return cALSNotEqualsLeftOperandAction_1_0_1_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1_1() { return cExclamationMarkEqualsSignKeyword_1_0_1_1; }

		//{ALSSubset.leftOperand=current} "in"
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }

		//{ALSSubset.leftOperand=current}
		public Action getALSSubsetLeftOperandAction_1_0_2_0() { return cALSSubsetLeftOperandAction_1_0_2_0; }

		//"in"
		public Keyword getInKeyword_1_0_2_1() { return cInKeyword_1_0_2_1; }

		//{ALSLess.leftOperand=current} ">"
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//{ALSLess.leftOperand=current}
		public Action getALSLessLeftOperandAction_1_0_3_0() { return cALSLessLeftOperandAction_1_0_3_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_0_3_1() { return cGreaterThanSignKeyword_1_0_3_1; }

		//{ALSLeq.leftOperand=current} ">="
		public Group getGroup_1_0_4() { return cGroup_1_0_4; }

		//{ALSLeq.leftOperand=current}
		public Action getALSLeqLeftOperandAction_1_0_4_0() { return cALSLeqLeftOperandAction_1_0_4_0; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_0_4_1() { return cGreaterThanSignEqualsSignKeyword_1_0_4_1; }

		//{ALSMore.leftOperand=current} "<"
		public Group getGroup_1_0_5() { return cGroup_1_0_5; }

		//{ALSMore.leftOperand=current}
		public Action getALSMoreLeftOperandAction_1_0_5_0() { return cALSMoreLeftOperandAction_1_0_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0_5_1() { return cLessThanSignKeyword_1_0_5_1; }

		//{ALSMeq.leftOperand=current} "<="
		public Group getGroup_1_0_6() { return cGroup_1_0_6; }

		//{ALSMeq.leftOperand=current}
		public Action getALSMeqLeftOperandAction_1_0_6_0() { return cALSMeqLeftOperandAction_1_0_6_0; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_0_6_1() { return cLessThanSignEqualsSignKeyword_1_0_6_1; }

		//rightOperand=ALSOverride
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ALSOverride
		public RuleCall getRightOperandALSOverrideParserRuleCall_1_1_0() { return cRightOperandALSOverrideParserRuleCall_1_1_0; }
	}

	public class ALSOverrideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSOverride");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSRangeRestrictionRightParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSOverrideLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSRangeRestrictionRightParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSOverride ALSTerm:
		//	ALSRangeRestrictionRight ({ALSOverride.leftOperand=current} '++' rightOperand=ALSRangeRestrictionRight)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSRangeRestrictionRight ({ALSOverride.leftOperand=current} '++' rightOperand=ALSRangeRestrictionRight)?
		public Group getGroup() { return cGroup; }

		//ALSRangeRestrictionRight
		public RuleCall getALSRangeRestrictionRightParserRuleCall_0() { return cALSRangeRestrictionRightParserRuleCall_0; }

		//({ALSOverride.leftOperand=current} '++' rightOperand=ALSRangeRestrictionRight)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSOverride.leftOperand=current}
		public Action getALSOverrideLeftOperandAction_1_0() { return cALSOverrideLeftOperandAction_1_0; }

		//'++'
		public Keyword getPlusSignPlusSignKeyword_1_1() { return cPlusSignPlusSignKeyword_1_1; }

		//rightOperand=ALSRangeRestrictionRight
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSRangeRestrictionRight
		public RuleCall getRightOperandALSRangeRestrictionRightParserRuleCall_1_2_0() { return cRightOperandALSRangeRestrictionRightParserRuleCall_1_2_0; }
	}

	public class ALSRangeRestrictionRightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSRangeRestrictionRight");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSRangeRestrictionLeftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSRangeRestrictionRightRelationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cColonGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFilterAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cFilterALSRangeRestrictionLeftParserRuleCall_1_2_0 = (RuleCall)cFilterAssignment_1_2.eContents().get(0);
		
		//ALSRangeRestrictionRight ALSTerm:
		//	ALSRangeRestrictionLeft ({ALSRangeRestrictionRight.relation=current} ':>' filter=ALSRangeRestrictionLeft)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSRangeRestrictionLeft ({ALSRangeRestrictionRight.relation=current} ':>' filter=ALSRangeRestrictionLeft)?
		public Group getGroup() { return cGroup; }

		//ALSRangeRestrictionLeft
		public RuleCall getALSRangeRestrictionLeftParserRuleCall_0() { return cALSRangeRestrictionLeftParserRuleCall_0; }

		//({ALSRangeRestrictionRight.relation=current} ':>' filter=ALSRangeRestrictionLeft)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSRangeRestrictionRight.relation=current}
		public Action getALSRangeRestrictionRightRelationAction_1_0() { return cALSRangeRestrictionRightRelationAction_1_0; }

		//':>'
		public Keyword getColonGreaterThanSignKeyword_1_1() { return cColonGreaterThanSignKeyword_1_1; }

		//filter=ALSRangeRestrictionLeft
		public Assignment getFilterAssignment_1_2() { return cFilterAssignment_1_2; }

		//ALSRangeRestrictionLeft
		public RuleCall getFilterALSRangeRestrictionLeftParserRuleCall_1_2_0() { return cFilterALSRangeRestrictionLeftParserRuleCall_1_2_0; }
	}

	public class ALSRangeRestrictionLeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSRangeRestrictionLeft");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSJoinParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSRangeRestrictionLeftFilterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRelationAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRelationALSJoinParserRuleCall_1_2_0 = (RuleCall)cRelationAssignment_1_2.eContents().get(0);
		
		//ALSRangeRestrictionLeft ALSTerm:
		//	ALSJoin ({ALSRangeRestrictionLeft.filter=current} '<:' relation=ALSJoin)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSJoin ({ALSRangeRestrictionLeft.filter=current} '<:' relation=ALSJoin)?
		public Group getGroup() { return cGroup; }

		//ALSJoin
		public RuleCall getALSJoinParserRuleCall_0() { return cALSJoinParserRuleCall_0; }

		//({ALSRangeRestrictionLeft.filter=current} '<:' relation=ALSJoin)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSRangeRestrictionLeft.filter=current}
		public Action getALSRangeRestrictionLeftFilterAction_1_0() { return cALSRangeRestrictionLeftFilterAction_1_0; }

		//'<:'
		public Keyword getLessThanSignColonKeyword_1_1() { return cLessThanSignColonKeyword_1_1; }

		//relation=ALSJoin
		public Assignment getRelationAssignment_1_2() { return cRelationAssignment_1_2; }

		//ALSJoin
		public RuleCall getRelationALSJoinParserRuleCall_1_2_0() { return cRelationALSJoinParserRuleCall_1_2_0; }
	}

	public class ALSJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSJoinLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSMinusParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSJoin ALSTerm:
		//	ALSMinus ({ALSJoin.leftOperand=current} '.' rightOperand=ALSMinus)*;
		@Override public ParserRule getRule() { return rule; }

		//ALSMinus ({ALSJoin.leftOperand=current} '.' rightOperand=ALSMinus)*
		public Group getGroup() { return cGroup; }

		//ALSMinus
		public RuleCall getALSMinusParserRuleCall_0() { return cALSMinusParserRuleCall_0; }

		//({ALSJoin.leftOperand=current} '.' rightOperand=ALSMinus)*
		public Group getGroup_1() { return cGroup_1; }

		//{ALSJoin.leftOperand=current}
		public Action getALSJoinLeftOperandAction_1_0() { return cALSJoinLeftOperandAction_1_0; }

		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//rightOperand=ALSMinus
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSMinus
		public RuleCall getRightOperandALSMinusParserRuleCall_1_2_0() { return cRightOperandALSMinusParserRuleCall_1_2_0; }
	}

	public class ALSMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSPlusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSMinusLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSPlusParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSMinus ALSTerm:
		//	ALSPlus ({ALSMinus.leftOperand=current} '-' rightOperand=ALSPlus)*;
		@Override public ParserRule getRule() { return rule; }

		//ALSPlus ({ALSMinus.leftOperand=current} '-' rightOperand=ALSPlus)*
		public Group getGroup() { return cGroup; }

		//ALSPlus
		public RuleCall getALSPlusParserRuleCall_0() { return cALSPlusParserRuleCall_0; }

		//({ALSMinus.leftOperand=current} '-' rightOperand=ALSPlus)*
		public Group getGroup_1() { return cGroup_1; }

		//{ALSMinus.leftOperand=current}
		public Action getALSMinusLeftOperandAction_1_0() { return cALSMinusLeftOperandAction_1_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }

		//rightOperand=ALSPlus
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSPlus
		public RuleCall getRightOperandALSPlusParserRuleCall_1_2_0() { return cRightOperandALSPlusParserRuleCall_1_2_0; }
	}

	public class ALSPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSPlus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSIntersectionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSPlusLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSIntersectionParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSPlus ALSTerm:
		//	ALSIntersection ({ALSPlus.leftOperand=current} '+' rightOperand=ALSIntersection)*;
		@Override public ParserRule getRule() { return rule; }

		//ALSIntersection ({ALSPlus.leftOperand=current} '+' rightOperand=ALSIntersection)*
		public Group getGroup() { return cGroup; }

		//ALSIntersection
		public RuleCall getALSIntersectionParserRuleCall_0() { return cALSIntersectionParserRuleCall_0; }

		//({ALSPlus.leftOperand=current} '+' rightOperand=ALSIntersection)*
		public Group getGroup_1() { return cGroup_1; }

		//{ALSPlus.leftOperand=current}
		public Action getALSPlusLeftOperandAction_1_0() { return cALSPlusLeftOperandAction_1_0; }

		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//rightOperand=ALSIntersection
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSIntersection
		public RuleCall getRightOperandALSIntersectionParserRuleCall_1_2_0() { return cRightOperandALSIntersectionParserRuleCall_1_2_0; }
	}

	public class ALSIntersectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSIntersection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSDirectProductParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSIntersectionLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOperandALSDirectProductParserRuleCall_1_2_0 = (RuleCall)cRightOperandAssignment_1_2.eContents().get(0);
		
		//ALSIntersection ALSTerm:
		//	ALSDirectProduct ({ALSIntersection.leftOperand=current} '&' rightOperand=ALSDirectProduct)*;
		@Override public ParserRule getRule() { return rule; }

		//ALSDirectProduct ({ALSIntersection.leftOperand=current} '&' rightOperand=ALSDirectProduct)*
		public Group getGroup() { return cGroup; }

		//ALSDirectProduct
		public RuleCall getALSDirectProductParserRuleCall_0() { return cALSDirectProductParserRuleCall_0; }

		//({ALSIntersection.leftOperand=current} '&' rightOperand=ALSDirectProduct)*
		public Group getGroup_1() { return cGroup_1; }

		//{ALSIntersection.leftOperand=current}
		public Action getALSIntersectionLeftOperandAction_1_0() { return cALSIntersectionLeftOperandAction_1_0; }

		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }

		//rightOperand=ALSDirectProduct
		public Assignment getRightOperandAssignment_1_2() { return cRightOperandAssignment_1_2; }

		//ALSDirectProduct
		public RuleCall getRightOperandALSDirectProductParserRuleCall_1_2_0() { return cRightOperandALSDirectProductParserRuleCall_1_2_0; }
	}

	public class ALSDirectProductElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSDirectProduct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALSPreficedParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cALSDirectProductLeftOperandAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cLeftMultiplicitAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftMultiplicitALSMultiplicityEnumRuleCall_1_1_0 = (RuleCall)cLeftMultiplicitAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightMultiplicitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightMultiplicitALSMultiplicityEnumRuleCall_1_3_0 = (RuleCall)cRightMultiplicitAssignment_1_3.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightOperandALSPreficedParserRuleCall_1_4_0 = (RuleCall)cRightOperandAssignment_1_4.eContents().get(0);
		
		////ALSMultiply returns ALSTerm: ALSDirectProduct ({ALSMultiply.leftOperand = current} '*' rightOperand = ALSDirectProduct)*;
		//ALSDirectProduct ALSTerm:
		//	ALSPreficed ({ALSDirectProduct.leftOperand=current} leftMultiplicit=ALSMultiplicity?
		//	'->'
		//	rightMultiplicit=ALSMultiplicity?
		//	rightOperand=ALSPreficed)?;
		@Override public ParserRule getRule() { return rule; }

		//ALSPreficed ({ALSDirectProduct.leftOperand=current} leftMultiplicit=ALSMultiplicity? '->'
		//rightMultiplicit=ALSMultiplicity? rightOperand=ALSPreficed)?
		public Group getGroup() { return cGroup; }

		//ALSPreficed
		public RuleCall getALSPreficedParserRuleCall_0() { return cALSPreficedParserRuleCall_0; }

		//({ALSDirectProduct.leftOperand=current} leftMultiplicit=ALSMultiplicity? '->' rightMultiplicit=ALSMultiplicity?
		//rightOperand=ALSPreficed)?
		public Group getGroup_1() { return cGroup_1; }

		//{ALSDirectProduct.leftOperand=current}
		public Action getALSDirectProductLeftOperandAction_1_0() { return cALSDirectProductLeftOperandAction_1_0; }

		//leftMultiplicit=ALSMultiplicity?
		public Assignment getLeftMultiplicitAssignment_1_1() { return cLeftMultiplicitAssignment_1_1; }

		//ALSMultiplicity
		public RuleCall getLeftMultiplicitALSMultiplicityEnumRuleCall_1_1_0() { return cLeftMultiplicitALSMultiplicityEnumRuleCall_1_1_0; }

		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//rightMultiplicit=ALSMultiplicity?
		public Assignment getRightMultiplicitAssignment_1_3() { return cRightMultiplicitAssignment_1_3; }

		//ALSMultiplicity
		public RuleCall getRightMultiplicitALSMultiplicityEnumRuleCall_1_3_0() { return cRightMultiplicitALSMultiplicityEnumRuleCall_1_3_0; }

		//rightOperand=ALSPreficed
		public Assignment getRightOperandAssignment_1_4() { return cRightOperandAssignment_1_4; }

		//ALSPreficed
		public RuleCall getRightOperandALSPreficedParserRuleCall_1_4_0() { return cRightOperandALSPreficedParserRuleCall_1_4_0; }
	}

	public class ALSPreficedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSPreficed");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cALSNotAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cNotKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cALSInverseRelationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cTildeKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperandAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_1_2_0 = (RuleCall)cOperandAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAlSTransitiveClosureAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cOperandAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_2_2_0 = (RuleCall)cOperandAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cALSReflectiveTransitiveClosureAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cAsteriskKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOperandAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_3_2_0 = (RuleCall)cOperandAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cALSCardinalityAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cNumberSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOperandAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_4_2_0 = (RuleCall)cOperandAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cALSUnaryMinusAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOperandAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cOperandALSBasicRelationTermParserRuleCall_5_2_0 = (RuleCall)cOperandAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cALSSumAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cSumKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cVariablesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_6_2_0 = (RuleCall)cVariablesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cVariablesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cVariablesALSVariableDeclarationParserRuleCall_6_3_1_0 = (RuleCall)cVariablesAssignment_6_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cExpressionAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cExpressionALSTermParserRuleCall_6_5_0 = (RuleCall)cExpressionAssignment_6_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cALSFunctionCallAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Alternatives cAlternatives_7_1 = (Alternatives)cGroup_7.eContents().get(1);
		private final Assignment cReferredDefinitionAssignment_7_1_0 = (Assignment)cAlternatives_7_1.eContents().get(0);
		private final CrossReference cReferredDefinitionALSDefinitionCrossReference_7_1_0_0 = (CrossReference)cReferredDefinitionAssignment_7_1_0.eContents().get(0);
		private final RuleCall cReferredDefinitionALSDefinitionIDTerminalRuleCall_7_1_0_0_1 = (RuleCall)cReferredDefinitionALSDefinitionCrossReference_7_1_0_0.eContents().get(1);
		private final Assignment cReferredNumericOperatorAssignment_7_1_1 = (Assignment)cAlternatives_7_1.eContents().get(1);
		private final RuleCall cReferredNumericOperatorALSNumericOperatorEnumRuleCall_7_1_1_0 = (RuleCall)cReferredNumericOperatorAssignment_7_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cParamsAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cParamsALSTermParserRuleCall_7_3_0 = (RuleCall)cParamsAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cParamsAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cParamsALSTermParserRuleCall_7_4_1_0 = (RuleCall)cParamsAssignment_7_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final RuleCall cALSBasicRelationTermParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//ALSPreficed ALSTerm:
		//	{ALSNot} => ("!" | 'not') operand=ALSBasicRelationTerm | {ALSInverseRelation} => "~" operand=ALSBasicRelationTerm |
		//	{AlSTransitiveClosure} "^" operand=ALSBasicRelationTerm | {ALSReflectiveTransitiveClosure} "*"
		//	operand=ALSBasicRelationTerm | {ALSCardinality} '#' operand=ALSBasicRelationTerm | {ALSUnaryMinus} => '-'
		//	operand=ALSBasicRelationTerm | {ALSSum} 'sum' variables+=ALSVariableDeclaration (','
		//	variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' | {ALSFunctionCall}
		//	(referredDefinition=[ALSDefinition] | referredNumericOperator=ALSNumericOperator) '[' params+=ALSTerm (','
		//	params+=ALSTerm)* ']' | ALSBasicRelationTerm;
		@Override public ParserRule getRule() { return rule; }

		//{ALSNot} => ("!" | 'not') operand=ALSBasicRelationTerm | {ALSInverseRelation} => "~" operand=ALSBasicRelationTerm |
		//{AlSTransitiveClosure} "^" operand=ALSBasicRelationTerm | {ALSReflectiveTransitiveClosure} "*"
		//operand=ALSBasicRelationTerm | {ALSCardinality} '#' operand=ALSBasicRelationTerm | {ALSUnaryMinus} => '-'
		//operand=ALSBasicRelationTerm | {ALSSum} 'sum' variables+=ALSVariableDeclaration (','
		//variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' | {ALSFunctionCall} (referredDefinition=[ALSDefinition]
		//| referredNumericOperator=ALSNumericOperator) '[' params+=ALSTerm (',' params+=ALSTerm)* ']' | ALSBasicRelationTerm
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ALSNot} => ("!" | 'not') operand=ALSBasicRelationTerm
		public Group getGroup_0() { return cGroup_0; }

		//{ALSNot}
		public Action getALSNotAction_0_0() { return cALSNotAction_0_0; }

		//=> ("!" | 'not')
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"!" | 'not'
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1_0_0() { return cExclamationMarkKeyword_0_1_0_0; }

		//'not'
		public Keyword getNotKeyword_0_1_0_1() { return cNotKeyword_0_1_0_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_0_2_0() { return cOperandALSBasicRelationTermParserRuleCall_0_2_0; }

		//{ALSInverseRelation} => "~" operand=ALSBasicRelationTerm
		public Group getGroup_1() { return cGroup_1; }

		//{ALSInverseRelation}
		public Action getALSInverseRelationAction_1_0() { return cALSInverseRelationAction_1_0; }

		//=> "~"
		public Keyword getTildeKeyword_1_1() { return cTildeKeyword_1_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_1_2() { return cOperandAssignment_1_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_1_2_0() { return cOperandALSBasicRelationTermParserRuleCall_1_2_0; }

		//{AlSTransitiveClosure} "^" operand=ALSBasicRelationTerm
		public Group getGroup_2() { return cGroup_2; }

		//{AlSTransitiveClosure}
		public Action getAlSTransitiveClosureAction_2_0() { return cAlSTransitiveClosureAction_2_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_2_1() { return cCircumflexAccentKeyword_2_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_2_2() { return cOperandAssignment_2_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_2_2_0() { return cOperandALSBasicRelationTermParserRuleCall_2_2_0; }

		//{ALSReflectiveTransitiveClosure} "*" operand=ALSBasicRelationTerm
		public Group getGroup_3() { return cGroup_3; }

		//{ALSReflectiveTransitiveClosure}
		public Action getALSReflectiveTransitiveClosureAction_3_0() { return cALSReflectiveTransitiveClosureAction_3_0; }

		//"*"
		public Keyword getAsteriskKeyword_3_1() { return cAsteriskKeyword_3_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_3_2() { return cOperandAssignment_3_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_3_2_0() { return cOperandALSBasicRelationTermParserRuleCall_3_2_0; }

		//{ALSCardinality} '#' operand=ALSBasicRelationTerm
		public Group getGroup_4() { return cGroup_4; }

		//{ALSCardinality}
		public Action getALSCardinalityAction_4_0() { return cALSCardinalityAction_4_0; }

		//'#'
		public Keyword getNumberSignKeyword_4_1() { return cNumberSignKeyword_4_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_4_2() { return cOperandAssignment_4_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_4_2_0() { return cOperandALSBasicRelationTermParserRuleCall_4_2_0; }

		//{ALSUnaryMinus} => '-' operand=ALSBasicRelationTerm
		public Group getGroup_5() { return cGroup_5; }

		//{ALSUnaryMinus}
		public Action getALSUnaryMinusAction_5_0() { return cALSUnaryMinusAction_5_0; }

		//=> '-'
		public Keyword getHyphenMinusKeyword_5_1() { return cHyphenMinusKeyword_5_1; }

		//operand=ALSBasicRelationTerm
		public Assignment getOperandAssignment_5_2() { return cOperandAssignment_5_2; }

		//ALSBasicRelationTerm
		public RuleCall getOperandALSBasicRelationTermParserRuleCall_5_2_0() { return cOperandALSBasicRelationTermParserRuleCall_5_2_0; }

		//{ALSSum} 'sum' variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}'
		public Group getGroup_6() { return cGroup_6; }

		//{ALSSum}
		public Action getALSSumAction_6_0() { return cALSSumAction_6_0; }

		//'sum'
		public Keyword getSumKeyword_6_1() { return cSumKeyword_6_1; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_6_2() { return cVariablesAssignment_6_2; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_6_2_0() { return cVariablesALSVariableDeclarationParserRuleCall_6_2_0; }

		//(',' variables+=ALSVariableDeclaration)*
		public Group getGroup_6_3() { return cGroup_6_3; }

		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }

		//variables+=ALSVariableDeclaration
		public Assignment getVariablesAssignment_6_3_1() { return cVariablesAssignment_6_3_1; }

		//ALSVariableDeclaration
		public RuleCall getVariablesALSVariableDeclarationParserRuleCall_6_3_1_0() { return cVariablesALSVariableDeclarationParserRuleCall_6_3_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_4() { return cLeftCurlyBracketKeyword_6_4; }

		//expression=ALSTerm
		public Assignment getExpressionAssignment_6_5() { return cExpressionAssignment_6_5; }

		//ALSTerm
		public RuleCall getExpressionALSTermParserRuleCall_6_5_0() { return cExpressionALSTermParserRuleCall_6_5_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6_6() { return cRightCurlyBracketKeyword_6_6; }

		//{ALSFunctionCall} (referredDefinition=[ALSDefinition] | referredNumericOperator=ALSNumericOperator) '[' params+=ALSTerm
		//(',' params+=ALSTerm)* ']'
		public Group getGroup_7() { return cGroup_7; }

		//{ALSFunctionCall}
		public Action getALSFunctionCallAction_7_0() { return cALSFunctionCallAction_7_0; }

		//referredDefinition=[ALSDefinition] | referredNumericOperator=ALSNumericOperator
		public Alternatives getAlternatives_7_1() { return cAlternatives_7_1; }

		//referredDefinition=[ALSDefinition]
		public Assignment getReferredDefinitionAssignment_7_1_0() { return cReferredDefinitionAssignment_7_1_0; }

		//[ALSDefinition]
		public CrossReference getReferredDefinitionALSDefinitionCrossReference_7_1_0_0() { return cReferredDefinitionALSDefinitionCrossReference_7_1_0_0; }

		//ID
		public RuleCall getReferredDefinitionALSDefinitionIDTerminalRuleCall_7_1_0_0_1() { return cReferredDefinitionALSDefinitionIDTerminalRuleCall_7_1_0_0_1; }

		//referredNumericOperator=ALSNumericOperator
		public Assignment getReferredNumericOperatorAssignment_7_1_1() { return cReferredNumericOperatorAssignment_7_1_1; }

		//ALSNumericOperator
		public RuleCall getReferredNumericOperatorALSNumericOperatorEnumRuleCall_7_1_1_0() { return cReferredNumericOperatorALSNumericOperatorEnumRuleCall_7_1_1_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_7_2() { return cLeftSquareBracketKeyword_7_2; }

		//params+=ALSTerm
		public Assignment getParamsAssignment_7_3() { return cParamsAssignment_7_3; }

		//ALSTerm
		public RuleCall getParamsALSTermParserRuleCall_7_3_0() { return cParamsALSTermParserRuleCall_7_3_0; }

		//(',' params+=ALSTerm)*
		public Group getGroup_7_4() { return cGroup_7_4; }

		//','
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }

		//params+=ALSTerm
		public Assignment getParamsAssignment_7_4_1() { return cParamsAssignment_7_4_1; }

		//ALSTerm
		public RuleCall getParamsALSTermParserRuleCall_7_4_1_0() { return cParamsALSTermParserRuleCall_7_4_1_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_7_5() { return cRightSquareBracketKeyword_7_5; }

		//ALSBasicRelationTerm
		public RuleCall getALSBasicRelationTermParserRuleCall_8() { return cALSBasicRelationTermParserRuleCall_8; }
	}

	public class ALSVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameALSIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRangeALSTermParserRuleCall_2_0 = (RuleCall)cRangeAssignment_2.eContents().get(0);
		
		////ALSVariable: name = ALSID;
		//ALSVariableDeclaration:
		//	name=ALSID ':' range=ALSTerm;
		@Override public ParserRule getRule() { return rule; }

		//name=ALSID ':' range=ALSTerm
		public Group getGroup() { return cGroup; }

		//name=ALSID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ALSID
		public RuleCall getNameALSIDParserRuleCall_0_0() { return cNameALSIDParserRuleCall_0_0; }

		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//range=ALSTerm
		public Assignment getRangeAssignment_2() { return cRangeAssignment_2; }

		//ALSTerm
		public RuleCall getRangeALSTermParserRuleCall_2_0() { return cRangeALSTermParserRuleCall_2_0; }
	}

	public class ALSBasicRelationTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSBasicRelationTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cALSNoneAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNoneKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cALSIdenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIdenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cALSUnivAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cUnivKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cALSIntAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cIntKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cALSStringAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cStringKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cALSReferenceAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cReferredAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cReferredALSRelationDeclarationCrossReference_5_1_0 = (CrossReference)cReferredAssignment_5_1.eContents().get(0);
		private final RuleCall cReferredALSRelationDeclarationIDTerminalRuleCall_5_1_0_1 = (RuleCall)cReferredALSRelationDeclarationCrossReference_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cALSNumberLiteralAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cALSStringLiteralAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cALSTermParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//ALSBasicRelationTerm ALSTerm:
		//	{ALSNone} 'none' | {ALSIden} 'iden' | {ALSUniv} 'univ' | {ALSInt} 'Int' | {ALSString} 'String' | {ALSReference}
		//	referred=[ALSRelationDeclaration] | {ALSNumberLiteral} value=INT | {ALSStringLiteral} value=STRING |
		//	'(' ALSTerm ')';
		@Override public ParserRule getRule() { return rule; }

		//{ALSNone} 'none' | {ALSIden} 'iden' | {ALSUniv} 'univ' | {ALSInt} 'Int' | {ALSString} 'String' | {ALSReference}
		//referred=[ALSRelationDeclaration] | {ALSNumberLiteral} value=INT | {ALSStringLiteral} value=STRING | '(' ALSTerm ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ALSNone} 'none'
		public Group getGroup_0() { return cGroup_0; }

		//{ALSNone}
		public Action getALSNoneAction_0_0() { return cALSNoneAction_0_0; }

		//'none'
		public Keyword getNoneKeyword_0_1() { return cNoneKeyword_0_1; }

		//{ALSIden} 'iden'
		public Group getGroup_1() { return cGroup_1; }

		//{ALSIden}
		public Action getALSIdenAction_1_0() { return cALSIdenAction_1_0; }

		//'iden'
		public Keyword getIdenKeyword_1_1() { return cIdenKeyword_1_1; }

		//{ALSUniv} 'univ'
		public Group getGroup_2() { return cGroup_2; }

		//{ALSUniv}
		public Action getALSUnivAction_2_0() { return cALSUnivAction_2_0; }

		//'univ'
		public Keyword getUnivKeyword_2_1() { return cUnivKeyword_2_1; }

		//{ALSInt} 'Int'
		public Group getGroup_3() { return cGroup_3; }

		//{ALSInt}
		public Action getALSIntAction_3_0() { return cALSIntAction_3_0; }

		//'Int'
		public Keyword getIntKeyword_3_1() { return cIntKeyword_3_1; }

		//{ALSString} 'String'
		public Group getGroup_4() { return cGroup_4; }

		//{ALSString}
		public Action getALSStringAction_4_0() { return cALSStringAction_4_0; }

		//'String'
		public Keyword getStringKeyword_4_1() { return cStringKeyword_4_1; }

		//{ALSReference} referred=[ALSRelationDeclaration]
		public Group getGroup_5() { return cGroup_5; }

		//{ALSReference}
		public Action getALSReferenceAction_5_0() { return cALSReferenceAction_5_0; }

		//referred=[ALSRelationDeclaration]
		public Assignment getReferredAssignment_5_1() { return cReferredAssignment_5_1; }

		//[ALSRelationDeclaration]
		public CrossReference getReferredALSRelationDeclarationCrossReference_5_1_0() { return cReferredALSRelationDeclarationCrossReference_5_1_0; }

		//ID
		public RuleCall getReferredALSRelationDeclarationIDTerminalRuleCall_5_1_0_1() { return cReferredALSRelationDeclarationIDTerminalRuleCall_5_1_0_1; }

		//{ALSNumberLiteral} value=INT
		public Group getGroup_6() { return cGroup_6; }

		//{ALSNumberLiteral}
		public Action getALSNumberLiteralAction_6_0() { return cALSNumberLiteralAction_6_0; }

		//value=INT
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_6_1_0() { return cValueINTTerminalRuleCall_6_1_0; }

		//{ALSStringLiteral} value=STRING
		public Group getGroup_7() { return cGroup_7; }

		//{ALSStringLiteral}
		public Action getALSStringLiteralAction_7_0() { return cALSStringLiteralAction_7_0; }

		//value=STRING
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_7_1_0() { return cValueSTRINGTerminalRuleCall_7_1_0; }

		//'(' ALSTerm ')'
		public Group getGroup_8() { return cGroup_8; }

		//'('
		public Keyword getLeftParenthesisKeyword_8_0() { return cLeftParenthesisKeyword_8_0; }

		//ALSTerm
		public RuleCall getALSTermParserRuleCall_8_1() { return cALSTermParserRuleCall_8_1; }

		//')'
		public Keyword getRightParenthesisKeyword_8_2() { return cRightParenthesisKeyword_8_2; }
	}

	public class ALSRunCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSRunCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cALSRunCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRunKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cForKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeScopesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeScopesALSTypeScopeParserRuleCall_4_1_0 = (RuleCall)cTypeScopesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTypeScopesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTypeScopesALSTypeScopeParserRuleCall_4_2_1_0 = (RuleCall)cTypeScopesAssignment_4_2_1.eContents().get(0);
		
		////////////////////////////////////
		//// ALS Commands and scopes
		////////////////////////////////////
		//ALSRunCommand:
		//	{ALSRunCommand} 'run' '{' '}' ('for' typeScopes+=ALSTypeScope (',' typeScopes+=ALSTypeScope)*)?;
		@Override public ParserRule getRule() { return rule; }

		//{ALSRunCommand} 'run' '{' '}' ('for' typeScopes+=ALSTypeScope (',' typeScopes+=ALSTypeScope)*)?
		public Group getGroup() { return cGroup; }

		//{ALSRunCommand}
		public Action getALSRunCommandAction_0() { return cALSRunCommandAction_0; }

		//'run'
		public Keyword getRunKeyword_1() { return cRunKeyword_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//('for' typeScopes+=ALSTypeScope (',' typeScopes+=ALSTypeScope)*)?
		public Group getGroup_4() { return cGroup_4; }

		//'for'
		public Keyword getForKeyword_4_0() { return cForKeyword_4_0; }

		//typeScopes+=ALSTypeScope
		public Assignment getTypeScopesAssignment_4_1() { return cTypeScopesAssignment_4_1; }

		//ALSTypeScope
		public RuleCall getTypeScopesALSTypeScopeParserRuleCall_4_1_0() { return cTypeScopesALSTypeScopeParserRuleCall_4_1_0; }

		//(',' typeScopes+=ALSTypeScope)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//typeScopes+=ALSTypeScope
		public Assignment getTypeScopesAssignment_4_2_1() { return cTypeScopesAssignment_4_2_1; }

		//ALSTypeScope
		public RuleCall getTypeScopesALSTypeScopeParserRuleCall_4_2_1_0() { return cTypeScopesALSTypeScopeParserRuleCall_4_2_1_0; }
	}

	public class ALSTypeScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSTypeScope");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cALSSigScopeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cALSIntScopeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cALSStringScopeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ALSTypeScope:
		//	ALSSigScope | ALSIntScope | ALSStringScope;
		@Override public ParserRule getRule() { return rule; }

		//ALSSigScope | ALSIntScope | ALSStringScope
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALSSigScope
		public RuleCall getALSSigScopeParserRuleCall_0() { return cALSSigScopeParserRuleCall_0; }

		//ALSIntScope
		public RuleCall getALSIntScopeParserRuleCall_1() { return cALSIntScopeParserRuleCall_1; }

		//ALSStringScope
		public RuleCall getALSStringScopeParserRuleCall_2() { return cALSStringScopeParserRuleCall_2; }
	}

	public class ALSSigScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSSigScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExactlyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cExactlyExactlyKeyword_0_0 = (Keyword)cExactlyAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeALSSignatureDeclarationCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeALSSignatureDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeALSSignatureDeclarationCrossReference_2_0.eContents().get(1);
		
		//ALSSigScope:
		//	exactly?='exactly'? number=INT type=[ALSSignatureDeclaration];
		@Override public ParserRule getRule() { return rule; }

		//exactly?='exactly'? number=INT type=[ALSSignatureDeclaration]
		public Group getGroup() { return cGroup; }

		//exactly?='exactly'?
		public Assignment getExactlyAssignment_0() { return cExactlyAssignment_0; }

		//'exactly'
		public Keyword getExactlyExactlyKeyword_0_0() { return cExactlyExactlyKeyword_0_0; }

		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }

		//type=[ALSSignatureDeclaration]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ALSSignatureDeclaration]
		public CrossReference getTypeALSSignatureDeclarationCrossReference_2_0() { return cTypeALSSignatureDeclarationCrossReference_2_0; }

		//ID
		public RuleCall getTypeALSSignatureDeclarationIDTerminalRuleCall_2_0_1() { return cTypeALSSignatureDeclarationIDTerminalRuleCall_2_0_1; }
	}

	public class ALSIntScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSIntScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumberAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumberINTTerminalRuleCall_0_0 = (RuleCall)cNumberAssignment_0.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ALSIntScope:
		//	number=INT 'Int';
		@Override public ParserRule getRule() { return rule; }

		//number=INT 'Int'
		public Group getGroup() { return cGroup; }

		//number=INT
		public Assignment getNumberAssignment_0() { return cNumberAssignment_0; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_0_0() { return cNumberINTTerminalRuleCall_0_0; }

		//'Int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class ALSStringScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSStringScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExactlyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Keyword cStringKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ALSStringScope:
		//	'exactly' number=INT 'String';
		@Override public ParserRule getRule() { return rule; }

		//'exactly' number=INT 'String'
		public Group getGroup() { return cGroup; }

		//'exactly'
		public Keyword getExactlyKeyword_0() { return cExactlyKeyword_0; }

		//number=INT
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_1_0() { return cNumberINTTerminalRuleCall_1_0; }

		//'String'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
	}
	
	
	public class ALSMultiplicityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAllEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAllAllKeyword_0_0 = (Keyword)cAllEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNoEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNoNoKeyword_1_0 = (Keyword)cNoEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSomeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSomeSomeKeyword_2_0 = (Keyword)cSomeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLoneEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLoneLoneKeyword_3_0 = (Keyword)cLoneEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOneEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOneOneKeyword_4_0 = (Keyword)cOneEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSetSetKeyword_5_0 = (Keyword)cSetEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ALSMultiplicity:
		//	all | no | some | lone | one | set;
		public EnumRule getRule() { return rule; }

		//all | no | some | lone | one | set
		public Alternatives getAlternatives() { return cAlternatives; }

		//all
		public EnumLiteralDeclaration getAllEnumLiteralDeclaration_0() { return cAllEnumLiteralDeclaration_0; }

		//"all"
		public Keyword getAllAllKeyword_0_0() { return cAllAllKeyword_0_0; }

		//no
		public EnumLiteralDeclaration getNoEnumLiteralDeclaration_1() { return cNoEnumLiteralDeclaration_1; }

		//"no"
		public Keyword getNoNoKeyword_1_0() { return cNoNoKeyword_1_0; }

		//some
		public EnumLiteralDeclaration getSomeEnumLiteralDeclaration_2() { return cSomeEnumLiteralDeclaration_2; }

		//"some"
		public Keyword getSomeSomeKeyword_2_0() { return cSomeSomeKeyword_2_0; }

		//lone
		public EnumLiteralDeclaration getLoneEnumLiteralDeclaration_3() { return cLoneEnumLiteralDeclaration_3; }

		//"lone"
		public Keyword getLoneLoneKeyword_3_0() { return cLoneLoneKeyword_3_0; }

		//one
		public EnumLiteralDeclaration getOneEnumLiteralDeclaration_4() { return cOneEnumLiteralDeclaration_4; }

		//"one"
		public Keyword getOneOneKeyword_4_0() { return cOneOneKeyword_4_0; }

		//set
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_5() { return cSetEnumLiteralDeclaration_5; }

		//"set"
		public Keyword getSetSetKeyword_5_0() { return cSetSetKeyword_5_0; }
	}

	public class ALSNumericOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ALSNumericOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSubEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSubSubKeyword_1_0 = (Keyword)cSubEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMulEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMulMulKeyword_2_0 = (Keyword)cMulEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRemEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRemRemKeyword_3_0 = (Keyword)cRemEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDivEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDivDivKeyword_4_0 = (Keyword)cDivEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ALSNumericOperator:
		//	plus | sub | mul | rem | div;
		public EnumRule getRule() { return rule; }

		//plus | sub | mul | rem | div
		public Alternatives getAlternatives() { return cAlternatives; }

		//plus
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"plus"
		public Keyword getPlusPlusKeyword_0_0() { return cPlusPlusKeyword_0_0; }

		//sub
		public EnumLiteralDeclaration getSubEnumLiteralDeclaration_1() { return cSubEnumLiteralDeclaration_1; }

		//"sub"
		public Keyword getSubSubKeyword_1_0() { return cSubSubKeyword_1_0; }

		//mul
		public EnumLiteralDeclaration getMulEnumLiteralDeclaration_2() { return cMulEnumLiteralDeclaration_2; }

		//"mul"
		public Keyword getMulMulKeyword_2_0() { return cMulMulKeyword_2_0; }

		//rem
		public EnumLiteralDeclaration getRemEnumLiteralDeclaration_3() { return cRemEnumLiteralDeclaration_3; }

		//"rem"
		public Keyword getRemRemKeyword_3_0() { return cRemRemKeyword_3_0; }

		//div
		public EnumLiteralDeclaration getDivEnumLiteralDeclaration_4() { return cDivEnumLiteralDeclaration_4; }

		//"div"
		public Keyword getDivDivKeyword_4_0() { return cDivDivKeyword_4_0; }
	}
	
	private final ALSDocumentElements pALSDocument;
	private final TerminalRule tID;
	private final ALSIDElements pALSID;
	private final ALSMultiplicityElements eALSMultiplicity;
	private final ALSRelationDeclarationElements pALSRelationDeclaration;
	private final ALSTypeDeclarationElements pALSTypeDeclaration;
	private final ALSEnumDeclarationElements pALSEnumDeclaration;
	private final ALSEnumLiteralElements pALSEnumLiteral;
	private final ALSSignatureDeclarationElements pALSSignatureDeclaration;
	private final ALSSignatureBodyElements pALSSignatureBody;
	private final ALSFieldDeclarationElements pALSFieldDeclaration;
	private final ALSDefinitionElements pALSDefinition;
	private final ALSFunctionDefinitionElements pALSFunctionDefinition;
	private final ALSRelationDefinitionElements pALSRelationDefinition;
	private final ALSFactDeclarationElements pALSFactDeclaration;
	private final ALSTermElements pALSTerm;
	private final ALSQuantifiedElements pALSQuantified;
	private final ALSOrElements pALSOr;
	private final ALSIffElements pALSIff;
	private final ALSImplElements pALSImpl;
	private final ALSAndElements pALSAnd;
	private final ALSComparisonElements pALSComparison;
	private final ALSOverrideElements pALSOverride;
	private final ALSRangeRestrictionRightElements pALSRangeRestrictionRight;
	private final ALSRangeRestrictionLeftElements pALSRangeRestrictionLeft;
	private final ALSJoinElements pALSJoin;
	private final ALSMinusElements pALSMinus;
	private final ALSPlusElements pALSPlus;
	private final ALSIntersectionElements pALSIntersection;
	private final ALSDirectProductElements pALSDirectProduct;
	private final ALSPreficedElements pALSPreficed;
	private final ALSNumericOperatorElements eALSNumericOperator;
	private final ALSVariableDeclarationElements pALSVariableDeclaration;
	private final ALSBasicRelationTermElements pALSBasicRelationTerm;
	private final ALSRunCommandElements pALSRunCommand;
	private final ALSTypeScopeElements pALSTypeScope;
	private final ALSSigScopeElements pALSSigScope;
	private final ALSIntScopeElements pALSIntScope;
	private final ALSStringScopeElements pALSStringScope;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlloyLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pALSDocument = new ALSDocumentElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.inf.dslreasoner.AlloyLanguage.ID");
		this.pALSID = new ALSIDElements();
		this.eALSMultiplicity = new ALSMultiplicityElements();
		this.pALSRelationDeclaration = new ALSRelationDeclarationElements();
		this.pALSTypeDeclaration = new ALSTypeDeclarationElements();
		this.pALSEnumDeclaration = new ALSEnumDeclarationElements();
		this.pALSEnumLiteral = new ALSEnumLiteralElements();
		this.pALSSignatureDeclaration = new ALSSignatureDeclarationElements();
		this.pALSSignatureBody = new ALSSignatureBodyElements();
		this.pALSFieldDeclaration = new ALSFieldDeclarationElements();
		this.pALSDefinition = new ALSDefinitionElements();
		this.pALSFunctionDefinition = new ALSFunctionDefinitionElements();
		this.pALSRelationDefinition = new ALSRelationDefinitionElements();
		this.pALSFactDeclaration = new ALSFactDeclarationElements();
		this.pALSTerm = new ALSTermElements();
		this.pALSQuantified = new ALSQuantifiedElements();
		this.pALSOr = new ALSOrElements();
		this.pALSIff = new ALSIffElements();
		this.pALSImpl = new ALSImplElements();
		this.pALSAnd = new ALSAndElements();
		this.pALSComparison = new ALSComparisonElements();
		this.pALSOverride = new ALSOverrideElements();
		this.pALSRangeRestrictionRight = new ALSRangeRestrictionRightElements();
		this.pALSRangeRestrictionLeft = new ALSRangeRestrictionLeftElements();
		this.pALSJoin = new ALSJoinElements();
		this.pALSMinus = new ALSMinusElements();
		this.pALSPlus = new ALSPlusElements();
		this.pALSIntersection = new ALSIntersectionElements();
		this.pALSDirectProduct = new ALSDirectProductElements();
		this.pALSPreficed = new ALSPreficedElements();
		this.eALSNumericOperator = new ALSNumericOperatorElements();
		this.pALSVariableDeclaration = new ALSVariableDeclarationElements();
		this.pALSBasicRelationTerm = new ALSBasicRelationTermElements();
		this.pALSRunCommand = new ALSRunCommandElements();
		this.pALSTypeScope = new ALSTypeScopeElements();
		this.pALSSigScope = new ALSSigScopeElements();
		this.pALSIntScope = new ALSIntScopeElements();
		this.pALSStringScope = new ALSStringScopeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.dslreasoner.AlloyLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ALSDocument:
	//	(enumDeclarations+=ALSEnumDeclaration | signatureBodies+=ALSSignatureBody |
	//	functionDefinitions+=ALSFunctionDefinition | relationDefinitions+=ALSRelationDefinition |
	//	factDeclarations+=ALSFactDeclaration)+
	//	runCommand=ALSRunCommand;
	public ALSDocumentElements getALSDocumentAccess() {
		return pALSDocument;
	}
	
	public ParserRule getALSDocumentRule() {
		return getALSDocumentAccess().getRule();
	}

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | "'" | '"' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//ALSID:
	//	ID;
	public ALSIDElements getALSIDAccess() {
		return pALSID;
	}
	
	public ParserRule getALSIDRule() {
		return getALSIDAccess().getRule();
	}

	//enum ALSMultiplicity:
	//	all | no | some | lone | one | set;
	public ALSMultiplicityElements getALSMultiplicityAccess() {
		return eALSMultiplicity;
	}
	
	public EnumRule getALSMultiplicityRule() {
		return getALSMultiplicityAccess().getRule();
	}

	////////////////////////////////////
	//// ALS types
	////////////////////////////////////
	//ALSRelationDeclaration:
	//	ALSTypeDeclaration | ALSEnumLiteral | ALSFieldDeclaration | ALSVariableDeclaration;
	public ALSRelationDeclarationElements getALSRelationDeclarationAccess() {
		return pALSRelationDeclaration;
	}
	
	public ParserRule getALSRelationDeclarationRule() {
		return getALSRelationDeclarationAccess().getRule();
	}

	//ALSTypeDeclaration:
	//	ALSEnumDeclaration | ALSSignatureDeclaration;
	public ALSTypeDeclarationElements getALSTypeDeclarationAccess() {
		return pALSTypeDeclaration;
	}
	
	public ParserRule getALSTypeDeclarationRule() {
		return getALSTypeDeclarationAccess().getRule();
	}

	//ALSEnumDeclaration:
	//	'enum' name=ALSID '{'
	//	literal+=ALSEnumLiteral ("," literal+=ALSEnumLiteral)*
	//	'}';
	public ALSEnumDeclarationElements getALSEnumDeclarationAccess() {
		return pALSEnumDeclaration;
	}
	
	public ParserRule getALSEnumDeclarationRule() {
		return getALSEnumDeclarationAccess().getRule();
	}

	//ALSEnumLiteral:
	//	name=ALSID;
	public ALSEnumLiteralElements getALSEnumLiteralAccess() {
		return pALSEnumLiteral;
	}
	
	public ParserRule getALSEnumLiteralRule() {
		return getALSEnumLiteralAccess().getRule();
	}

	//ALSSignatureDeclaration:
	//	name=ALSID;
	public ALSSignatureDeclarationElements getALSSignatureDeclarationAccess() {
		return pALSSignatureDeclaration;
	}
	
	public ParserRule getALSSignatureDeclarationRule() {
		return getALSSignatureDeclarationAccess().getRule();
	}

	//ALSSignatureBody:
	//	(multiplicity=ALSMultiplicity? & abstract?='abstract'?)
	//	'sig'
	//	declarations+=ALSSignatureDeclaration (',' declarations+=ALSSignatureDeclaration)* ('extends'
	//	supertype=[ALSSignatureDeclaration] | 'in' superset+=[ALSSignatureDeclaration] ('+'
	//	superset+=[ALSSignatureDeclaration])*)?
	//	'{' (fields+=ALSFieldDeclaration ("," fields+=ALSFieldDeclaration)*)? '}';
	public ALSSignatureBodyElements getALSSignatureBodyAccess() {
		return pALSSignatureBody;
	}
	
	public ParserRule getALSSignatureBodyRule() {
		return getALSSignatureBodyAccess().getRule();
	}

	//ALSFieldDeclaration:
	//	name=ALSID ':' multiplicity=ALSMultiplicity? type=ALSTerm;
	public ALSFieldDeclarationElements getALSFieldDeclarationAccess() {
		return pALSFieldDeclaration;
	}
	
	public ParserRule getALSFieldDeclarationRule() {
		return getALSFieldDeclarationAccess().getRule();
	}

	//ALSDefinition:
	//	ALSFunctionDefinition | ALSRelationDefinition;
	public ALSDefinitionElements getALSDefinitionAccess() {
		return pALSDefinition;
	}
	
	public ParserRule getALSDefinitionRule() {
		return getALSDefinitionAccess().getRule();
	}

	//ALSFunctionDefinition:
	//	"fun" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]" ":" type=ALSTerm
	//	"{" value=ALSTerm "}";
	public ALSFunctionDefinitionElements getALSFunctionDefinitionAccess() {
		return pALSFunctionDefinition;
	}
	
	public ParserRule getALSFunctionDefinitionRule() {
		return getALSFunctionDefinitionAccess().getRule();
	}

	//ALSRelationDefinition:
	//	"pred" name=ALSID "[" variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* "]"
	//	"{" value=ALSTerm "}";
	public ALSRelationDefinitionElements getALSRelationDefinitionAccess() {
		return pALSRelationDefinition;
	}
	
	public ParserRule getALSRelationDefinitionRule() {
		return getALSRelationDefinitionAccess().getRule();
	}

	//ALSFactDeclaration:
	//	{ALSFactDeclaration} 'fact' name=ALSID? '{' term=ALSTerm '}';
	public ALSFactDeclarationElements getALSFactDeclarationAccess() {
		return pALSFactDeclaration;
	}
	
	public ParserRule getALSFactDeclarationRule() {
		return getALSFactDeclarationAccess().getRule();
	}

	////////////////////////////////////
	//// ALS terms
	////////////////////////////////////
	//ALSTerm:
	//	ALSQuantified;
	public ALSTermElements getALSTermAccess() {
		return pALSTerm;
	}
	
	public ParserRule getALSTermRule() {
		return getALSTermAccess().getRule();
	}

	//ALSQuantified ALSTerm:
	//	{ALSQuantifiedEx} type=ALSMultiplicity
	//	disj?='disj'? variables+=ALSVariableDeclaration (',' variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' |
	//	ALSOr;
	public ALSQuantifiedElements getALSQuantifiedAccess() {
		return pALSQuantified;
	}
	
	public ParserRule getALSQuantifiedRule() {
		return getALSQuantifiedAccess().getRule();
	}

	//ALSOr ALSTerm:
	//	ALSIff ({ALSOr.leftOperand=current} ("||" | "or") rightOperand=ALSIff)?;
	public ALSOrElements getALSOrAccess() {
		return pALSOr;
	}
	
	public ParserRule getALSOrRule() {
		return getALSOrAccess().getRule();
	}

	//ALSIff ALSTerm:
	//	ALSImpl ({ALSIff.leftOperand=current} ("<=>" | "iff") rightOperand=ALSImpl)?;
	public ALSIffElements getALSIffAccess() {
		return pALSIff;
	}
	
	public ParserRule getALSIffRule() {
		return getALSIffAccess().getRule();
	}

	//ALSImpl ALSTerm:
	//	ALSAnd ({ALSImpl.leftOperand=current} ("=>" | "implies") rightOperand=ALSAnd ('else' elseOperand=ALSAnd)?)?;
	public ALSImplElements getALSImplAccess() {
		return pALSImpl;
	}
	
	public ParserRule getALSImplRule() {
		return getALSImplAccess().getRule();
	}

	//ALSAnd ALSTerm:
	//	ALSComparison ({ALSAnd.leftOperand=current} ("&&" | "and") rightOperand=ALSComparison)?;
	public ALSAndElements getALSAndAccess() {
		return pALSAnd;
	}
	
	public ParserRule getALSAndRule() {
		return getALSAndAccess().getRule();
	}

	//ALSComparison ALSTerm:
	//	ALSOverride (({ALSEquals.leftOperand=current} "=" | {ALSNotEquals.leftOperand=current} "!=" |
	//	{ALSSubset.leftOperand=current} "in" | {ALSLess.leftOperand=current} ">" | {ALSLeq.leftOperand=current} ">=" |
	//	{ALSMore.leftOperand=current} "<" | {ALSMeq.leftOperand=current} "<=") rightOperand=ALSOverride)?;
	public ALSComparisonElements getALSComparisonAccess() {
		return pALSComparison;
	}
	
	public ParserRule getALSComparisonRule() {
		return getALSComparisonAccess().getRule();
	}

	//ALSOverride ALSTerm:
	//	ALSRangeRestrictionRight ({ALSOverride.leftOperand=current} '++' rightOperand=ALSRangeRestrictionRight)?;
	public ALSOverrideElements getALSOverrideAccess() {
		return pALSOverride;
	}
	
	public ParserRule getALSOverrideRule() {
		return getALSOverrideAccess().getRule();
	}

	//ALSRangeRestrictionRight ALSTerm:
	//	ALSRangeRestrictionLeft ({ALSRangeRestrictionRight.relation=current} ':>' filter=ALSRangeRestrictionLeft)?;
	public ALSRangeRestrictionRightElements getALSRangeRestrictionRightAccess() {
		return pALSRangeRestrictionRight;
	}
	
	public ParserRule getALSRangeRestrictionRightRule() {
		return getALSRangeRestrictionRightAccess().getRule();
	}

	//ALSRangeRestrictionLeft ALSTerm:
	//	ALSJoin ({ALSRangeRestrictionLeft.filter=current} '<:' relation=ALSJoin)?;
	public ALSRangeRestrictionLeftElements getALSRangeRestrictionLeftAccess() {
		return pALSRangeRestrictionLeft;
	}
	
	public ParserRule getALSRangeRestrictionLeftRule() {
		return getALSRangeRestrictionLeftAccess().getRule();
	}

	//ALSJoin ALSTerm:
	//	ALSMinus ({ALSJoin.leftOperand=current} '.' rightOperand=ALSMinus)*;
	public ALSJoinElements getALSJoinAccess() {
		return pALSJoin;
	}
	
	public ParserRule getALSJoinRule() {
		return getALSJoinAccess().getRule();
	}

	//ALSMinus ALSTerm:
	//	ALSPlus ({ALSMinus.leftOperand=current} '-' rightOperand=ALSPlus)*;
	public ALSMinusElements getALSMinusAccess() {
		return pALSMinus;
	}
	
	public ParserRule getALSMinusRule() {
		return getALSMinusAccess().getRule();
	}

	//ALSPlus ALSTerm:
	//	ALSIntersection ({ALSPlus.leftOperand=current} '+' rightOperand=ALSIntersection)*;
	public ALSPlusElements getALSPlusAccess() {
		return pALSPlus;
	}
	
	public ParserRule getALSPlusRule() {
		return getALSPlusAccess().getRule();
	}

	//ALSIntersection ALSTerm:
	//	ALSDirectProduct ({ALSIntersection.leftOperand=current} '&' rightOperand=ALSDirectProduct)*;
	public ALSIntersectionElements getALSIntersectionAccess() {
		return pALSIntersection;
	}
	
	public ParserRule getALSIntersectionRule() {
		return getALSIntersectionAccess().getRule();
	}

	////ALSMultiply returns ALSTerm: ALSDirectProduct ({ALSMultiply.leftOperand = current} '*' rightOperand = ALSDirectProduct)*;
	//ALSDirectProduct ALSTerm:
	//	ALSPreficed ({ALSDirectProduct.leftOperand=current} leftMultiplicit=ALSMultiplicity?
	//	'->'
	//	rightMultiplicit=ALSMultiplicity?
	//	rightOperand=ALSPreficed)?;
	public ALSDirectProductElements getALSDirectProductAccess() {
		return pALSDirectProduct;
	}
	
	public ParserRule getALSDirectProductRule() {
		return getALSDirectProductAccess().getRule();
	}

	//ALSPreficed ALSTerm:
	//	{ALSNot} => ("!" | 'not') operand=ALSBasicRelationTerm | {ALSInverseRelation} => "~" operand=ALSBasicRelationTerm |
	//	{AlSTransitiveClosure} "^" operand=ALSBasicRelationTerm | {ALSReflectiveTransitiveClosure} "*"
	//	operand=ALSBasicRelationTerm | {ALSCardinality} '#' operand=ALSBasicRelationTerm | {ALSUnaryMinus} => '-'
	//	operand=ALSBasicRelationTerm | {ALSSum} 'sum' variables+=ALSVariableDeclaration (','
	//	variables+=ALSVariableDeclaration)* '{' expression=ALSTerm '}' | {ALSFunctionCall}
	//	(referredDefinition=[ALSDefinition] | referredNumericOperator=ALSNumericOperator) '[' params+=ALSTerm (','
	//	params+=ALSTerm)* ']' | ALSBasicRelationTerm;
	public ALSPreficedElements getALSPreficedAccess() {
		return pALSPreficed;
	}
	
	public ParserRule getALSPreficedRule() {
		return getALSPreficedAccess().getRule();
	}

	//enum ALSNumericOperator:
	//	plus | sub | mul | rem | div;
	public ALSNumericOperatorElements getALSNumericOperatorAccess() {
		return eALSNumericOperator;
	}
	
	public EnumRule getALSNumericOperatorRule() {
		return getALSNumericOperatorAccess().getRule();
	}

	////ALSVariable: name = ALSID;
	//ALSVariableDeclaration:
	//	name=ALSID ':' range=ALSTerm;
	public ALSVariableDeclarationElements getALSVariableDeclarationAccess() {
		return pALSVariableDeclaration;
	}
	
	public ParserRule getALSVariableDeclarationRule() {
		return getALSVariableDeclarationAccess().getRule();
	}

	//ALSBasicRelationTerm ALSTerm:
	//	{ALSNone} 'none' | {ALSIden} 'iden' | {ALSUniv} 'univ' | {ALSInt} 'Int' | {ALSString} 'String' | {ALSReference}
	//	referred=[ALSRelationDeclaration] | {ALSNumberLiteral} value=INT | {ALSStringLiteral} value=STRING |
	//	'(' ALSTerm ')';
	public ALSBasicRelationTermElements getALSBasicRelationTermAccess() {
		return pALSBasicRelationTerm;
	}
	
	public ParserRule getALSBasicRelationTermRule() {
		return getALSBasicRelationTermAccess().getRule();
	}

	////////////////////////////////////
	//// ALS Commands and scopes
	////////////////////////////////////
	//ALSRunCommand:
	//	{ALSRunCommand} 'run' '{' '}' ('for' typeScopes+=ALSTypeScope (',' typeScopes+=ALSTypeScope)*)?;
	public ALSRunCommandElements getALSRunCommandAccess() {
		return pALSRunCommand;
	}
	
	public ParserRule getALSRunCommandRule() {
		return getALSRunCommandAccess().getRule();
	}

	//ALSTypeScope:
	//	ALSSigScope | ALSIntScope | ALSStringScope;
	public ALSTypeScopeElements getALSTypeScopeAccess() {
		return pALSTypeScope;
	}
	
	public ParserRule getALSTypeScopeRule() {
		return getALSTypeScopeAccess().getRule();
	}

	//ALSSigScope:
	//	exactly?='exactly'? number=INT type=[ALSSignatureDeclaration];
	public ALSSigScopeElements getALSSigScopeAccess() {
		return pALSSigScope;
	}
	
	public ParserRule getALSSigScopeRule() {
		return getALSSigScopeAccess().getRule();
	}

	//ALSIntScope:
	//	number=INT 'Int';
	public ALSIntScopeElements getALSIntScopeAccess() {
		return pALSIntScope;
	}
	
	public ParserRule getALSIntScopeRule() {
		return getALSIntScopeAccess().getRule();
	}

	//ALSStringScope:
	//	'exactly' number=INT 'String';
	public ALSStringScopeElements getALSStringScopeAccess() {
		return pALSStringScope;
	}
	
	public ParserRule getALSStringScopeRule() {
		return getALSStringScopeAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
