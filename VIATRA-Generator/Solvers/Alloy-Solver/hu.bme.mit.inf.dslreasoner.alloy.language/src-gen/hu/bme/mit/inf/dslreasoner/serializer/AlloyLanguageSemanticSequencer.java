/*
 * generated by Xtext
 */
package hu.bme.mit.inf.dslreasoner.serializer;

import com.google.inject.Inject;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSAnd;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSCardinality;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSDirectProduct;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSDocument;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSEnumDeclaration;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSEnumLiteral;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSEquals;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSFactDeclaration;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSFieldDeclaration;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSFunctionCall;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSFunctionDefinition;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSIden;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSIff;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSImpl;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSInt;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSIntScope;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSIntersection;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSInverseRelation;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSJoin;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSLeq;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSLess;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSMeq;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSMinus;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSMore;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSNone;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSNot;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSNotEquals;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSNumberLiteral;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSOr;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSOverride;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSPlus;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSQuantifiedEx;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSRangeRestrictionLeft;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSRangeRestrictionRight;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSReference;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSReflectiveTransitiveClosure;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSRelationDefinition;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSRunCommand;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSSigScope;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSSignatureBody;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSSignatureDeclaration;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSString;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSStringLiteral;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSStringScope;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSSubset;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSSum;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSUnaryMinus;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSUniv;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.ALSVariableDeclaration;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.AlSTransitiveClosure;
import hu.bme.mit.inf.dslreasoner.alloyLanguage.AlloyLanguagePackage;
import hu.bme.mit.inf.dslreasoner.services.AlloyLanguageGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AlloyLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AlloyLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AlloyLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AlloyLanguagePackage.ALS_AND:
				sequence_ALSAnd(context, (ALSAnd) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_CARDINALITY:
				sequence_ALSPreficed(context, (ALSCardinality) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_DIRECT_PRODUCT:
				sequence_ALSDirectProduct(context, (ALSDirectProduct) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_DOCUMENT:
				sequence_ALSDocument(context, (ALSDocument) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_ENUM_DECLARATION:
				sequence_ALSEnumDeclaration(context, (ALSEnumDeclaration) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_ENUM_LITERAL:
				sequence_ALSEnumLiteral(context, (ALSEnumLiteral) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_EQUALS:
				sequence_ALSComparison(context, (ALSEquals) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_FACT_DECLARATION:
				sequence_ALSFactDeclaration(context, (ALSFactDeclaration) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_FIELD_DECLARATION:
				sequence_ALSFieldDeclaration(context, (ALSFieldDeclaration) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_FUNCTION_CALL:
				sequence_ALSPreficed(context, (ALSFunctionCall) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_FUNCTION_DEFINITION:
				sequence_ALSFunctionDefinition(context, (ALSFunctionDefinition) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_IDEN:
				sequence_ALSBasicRelationTerm(context, (ALSIden) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_IFF:
				sequence_ALSIff(context, (ALSIff) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_IMPL:
				sequence_ALSImpl(context, (ALSImpl) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_INT:
				sequence_ALSBasicRelationTerm(context, (ALSInt) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_INT_SCOPE:
				sequence_ALSIntScope(context, (ALSIntScope) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_INTERSECTION:
				sequence_ALSIntersection(context, (ALSIntersection) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_INVERSE_RELATION:
				sequence_ALSPreficed(context, (ALSInverseRelation) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_JOIN:
				sequence_ALSJoin(context, (ALSJoin) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_LEQ:
				sequence_ALSComparison(context, (ALSLeq) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_LESS:
				sequence_ALSComparison(context, (ALSLess) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_MEQ:
				sequence_ALSComparison(context, (ALSMeq) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_MINUS:
				sequence_ALSMinus(context, (ALSMinus) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_MORE:
				sequence_ALSComparison(context, (ALSMore) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_NONE:
				sequence_ALSBasicRelationTerm(context, (ALSNone) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_NOT:
				sequence_ALSPreficed(context, (ALSNot) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_NOT_EQUALS:
				sequence_ALSComparison(context, (ALSNotEquals) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_NUMBER_LITERAL:
				sequence_ALSBasicRelationTerm(context, (ALSNumberLiteral) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_OR:
				sequence_ALSOr(context, (ALSOr) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_OVERRIDE:
				sequence_ALSOverride(context, (ALSOverride) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_PLUS:
				sequence_ALSPlus(context, (ALSPlus) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_QUANTIFIED_EX:
				sequence_ALSQuantified(context, (ALSQuantifiedEx) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_RANGE_RESTRICTION_LEFT:
				sequence_ALSRangeRestrictionLeft(context, (ALSRangeRestrictionLeft) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_RANGE_RESTRICTION_RIGHT:
				sequence_ALSRangeRestrictionRight(context, (ALSRangeRestrictionRight) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_REFERENCE:
				sequence_ALSBasicRelationTerm(context, (ALSReference) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_REFLECTIVE_TRANSITIVE_CLOSURE:
				sequence_ALSPreficed(context, (ALSReflectiveTransitiveClosure) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_RELATION_DEFINITION:
				sequence_ALSRelationDefinition(context, (ALSRelationDefinition) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_RUN_COMMAND:
				sequence_ALSRunCommand(context, (ALSRunCommand) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_SIG_SCOPE:
				sequence_ALSSigScope(context, (ALSSigScope) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_SIGNATURE_BODY:
				sequence_ALSSignatureBody(context, (ALSSignatureBody) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_SIGNATURE_DECLARATION:
				sequence_ALSSignatureDeclaration(context, (ALSSignatureDeclaration) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_STRING:
				sequence_ALSBasicRelationTerm(context, (ALSString) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_STRING_LITERAL:
				sequence_ALSBasicRelationTerm(context, (ALSStringLiteral) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_STRING_SCOPE:
				sequence_ALSStringScope(context, (ALSStringScope) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_SUBSET:
				sequence_ALSComparison(context, (ALSSubset) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_SUM:
				sequence_ALSPreficed(context, (ALSSum) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_UNARY_MINUS:
				sequence_ALSPreficed(context, (ALSUnaryMinus) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_UNIV:
				sequence_ALSBasicRelationTerm(context, (ALSUniv) semanticObject); 
				return; 
			case AlloyLanguagePackage.ALS_VARIABLE_DECLARATION:
				sequence_ALSVariableDeclaration(context, (ALSVariableDeclaration) semanticObject); 
				return; 
			case AlloyLanguagePackage.AL_STRANSITIVE_CLOSURE:
				sequence_ALSPreficed(context, (AlSTransitiveClosure) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSAnd
	 *     ALSQuantified returns ALSAnd
	 *     ALSOr returns ALSAnd
	 *     ALSOr.ALSOr_1_0 returns ALSAnd
	 *     ALSIff returns ALSAnd
	 *     ALSIff.ALSIff_1_0 returns ALSAnd
	 *     ALSImpl returns ALSAnd
	 *     ALSImpl.ALSImpl_1_0 returns ALSAnd
	 *     ALSAnd returns ALSAnd
	 *     ALSAnd.ALSAnd_1_0 returns ALSAnd
	 *     ALSComparison returns ALSAnd
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSAnd
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSAnd
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSAnd
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSAnd
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSAnd
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSAnd
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSAnd
	 *     ALSOverride returns ALSAnd
	 *     ALSOverride.ALSOverride_1_0 returns ALSAnd
	 *     ALSRangeRestrictionRight returns ALSAnd
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSAnd
	 *     ALSRangeRestrictionLeft returns ALSAnd
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSAnd
	 *     ALSJoin returns ALSAnd
	 *     ALSJoin.ALSJoin_1_0 returns ALSAnd
	 *     ALSMinus returns ALSAnd
	 *     ALSMinus.ALSMinus_1_0 returns ALSAnd
	 *     ALSPlus returns ALSAnd
	 *     ALSPlus.ALSPlus_1_0 returns ALSAnd
	 *     ALSIntersection returns ALSAnd
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSAnd
	 *     ALSDirectProduct returns ALSAnd
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSAnd
	 *     ALSPreficed returns ALSAnd
	 *     ALSBasicRelationTerm returns ALSAnd
	 *
	 * Constraint:
	 *     (leftOperand=ALSAnd_ALSAnd_1_0 rightOperand=ALSComparison)
	 */
	protected void sequence_ALSAnd(ISerializationContext context, ALSAnd semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_AND__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_AND__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_AND__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_AND__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSAndAccess().getALSAndLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSAndAccess().getRightOperandALSComparisonParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSIden
	 *     ALSQuantified returns ALSIden
	 *     ALSOr returns ALSIden
	 *     ALSOr.ALSOr_1_0 returns ALSIden
	 *     ALSIff returns ALSIden
	 *     ALSIff.ALSIff_1_0 returns ALSIden
	 *     ALSImpl returns ALSIden
	 *     ALSImpl.ALSImpl_1_0 returns ALSIden
	 *     ALSAnd returns ALSIden
	 *     ALSAnd.ALSAnd_1_0 returns ALSIden
	 *     ALSComparison returns ALSIden
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSIden
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSIden
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSIden
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSIden
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSIden
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSIden
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSIden
	 *     ALSOverride returns ALSIden
	 *     ALSOverride.ALSOverride_1_0 returns ALSIden
	 *     ALSRangeRestrictionRight returns ALSIden
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSIden
	 *     ALSRangeRestrictionLeft returns ALSIden
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSIden
	 *     ALSJoin returns ALSIden
	 *     ALSJoin.ALSJoin_1_0 returns ALSIden
	 *     ALSMinus returns ALSIden
	 *     ALSMinus.ALSMinus_1_0 returns ALSIden
	 *     ALSPlus returns ALSIden
	 *     ALSPlus.ALSPlus_1_0 returns ALSIden
	 *     ALSIntersection returns ALSIden
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSIden
	 *     ALSDirectProduct returns ALSIden
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSIden
	 *     ALSPreficed returns ALSIden
	 *     ALSBasicRelationTerm returns ALSIden
	 *
	 * Constraint:
	 *     {ALSIden}
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSIden semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSInt
	 *     ALSQuantified returns ALSInt
	 *     ALSOr returns ALSInt
	 *     ALSOr.ALSOr_1_0 returns ALSInt
	 *     ALSIff returns ALSInt
	 *     ALSIff.ALSIff_1_0 returns ALSInt
	 *     ALSImpl returns ALSInt
	 *     ALSImpl.ALSImpl_1_0 returns ALSInt
	 *     ALSAnd returns ALSInt
	 *     ALSAnd.ALSAnd_1_0 returns ALSInt
	 *     ALSComparison returns ALSInt
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSInt
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSInt
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSInt
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSInt
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSInt
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSInt
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSInt
	 *     ALSOverride returns ALSInt
	 *     ALSOverride.ALSOverride_1_0 returns ALSInt
	 *     ALSRangeRestrictionRight returns ALSInt
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSInt
	 *     ALSRangeRestrictionLeft returns ALSInt
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSInt
	 *     ALSJoin returns ALSInt
	 *     ALSJoin.ALSJoin_1_0 returns ALSInt
	 *     ALSMinus returns ALSInt
	 *     ALSMinus.ALSMinus_1_0 returns ALSInt
	 *     ALSPlus returns ALSInt
	 *     ALSPlus.ALSPlus_1_0 returns ALSInt
	 *     ALSIntersection returns ALSInt
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSInt
	 *     ALSDirectProduct returns ALSInt
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSInt
	 *     ALSPreficed returns ALSInt
	 *     ALSBasicRelationTerm returns ALSInt
	 *
	 * Constraint:
	 *     {ALSInt}
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSInt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSNone
	 *     ALSQuantified returns ALSNone
	 *     ALSOr returns ALSNone
	 *     ALSOr.ALSOr_1_0 returns ALSNone
	 *     ALSIff returns ALSNone
	 *     ALSIff.ALSIff_1_0 returns ALSNone
	 *     ALSImpl returns ALSNone
	 *     ALSImpl.ALSImpl_1_0 returns ALSNone
	 *     ALSAnd returns ALSNone
	 *     ALSAnd.ALSAnd_1_0 returns ALSNone
	 *     ALSComparison returns ALSNone
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSNone
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSNone
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSNone
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSNone
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSNone
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSNone
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSNone
	 *     ALSOverride returns ALSNone
	 *     ALSOverride.ALSOverride_1_0 returns ALSNone
	 *     ALSRangeRestrictionRight returns ALSNone
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSNone
	 *     ALSRangeRestrictionLeft returns ALSNone
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSNone
	 *     ALSJoin returns ALSNone
	 *     ALSJoin.ALSJoin_1_0 returns ALSNone
	 *     ALSMinus returns ALSNone
	 *     ALSMinus.ALSMinus_1_0 returns ALSNone
	 *     ALSPlus returns ALSNone
	 *     ALSPlus.ALSPlus_1_0 returns ALSNone
	 *     ALSIntersection returns ALSNone
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSNone
	 *     ALSDirectProduct returns ALSNone
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSNone
	 *     ALSPreficed returns ALSNone
	 *     ALSBasicRelationTerm returns ALSNone
	 *
	 * Constraint:
	 *     {ALSNone}
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSNone semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSNumberLiteral
	 *     ALSQuantified returns ALSNumberLiteral
	 *     ALSOr returns ALSNumberLiteral
	 *     ALSOr.ALSOr_1_0 returns ALSNumberLiteral
	 *     ALSIff returns ALSNumberLiteral
	 *     ALSIff.ALSIff_1_0 returns ALSNumberLiteral
	 *     ALSImpl returns ALSNumberLiteral
	 *     ALSImpl.ALSImpl_1_0 returns ALSNumberLiteral
	 *     ALSAnd returns ALSNumberLiteral
	 *     ALSAnd.ALSAnd_1_0 returns ALSNumberLiteral
	 *     ALSComparison returns ALSNumberLiteral
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSNumberLiteral
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSNumberLiteral
	 *     ALSOverride returns ALSNumberLiteral
	 *     ALSOverride.ALSOverride_1_0 returns ALSNumberLiteral
	 *     ALSRangeRestrictionRight returns ALSNumberLiteral
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSNumberLiteral
	 *     ALSRangeRestrictionLeft returns ALSNumberLiteral
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSNumberLiteral
	 *     ALSJoin returns ALSNumberLiteral
	 *     ALSJoin.ALSJoin_1_0 returns ALSNumberLiteral
	 *     ALSMinus returns ALSNumberLiteral
	 *     ALSMinus.ALSMinus_1_0 returns ALSNumberLiteral
	 *     ALSPlus returns ALSNumberLiteral
	 *     ALSPlus.ALSPlus_1_0 returns ALSNumberLiteral
	 *     ALSIntersection returns ALSNumberLiteral
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSNumberLiteral
	 *     ALSDirectProduct returns ALSNumberLiteral
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSNumberLiteral
	 *     ALSPreficed returns ALSNumberLiteral
	 *     ALSBasicRelationTerm returns ALSNumberLiteral
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSNumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSBasicRelationTermAccess().getValueINTTerminalRuleCall_6_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSReference
	 *     ALSQuantified returns ALSReference
	 *     ALSOr returns ALSReference
	 *     ALSOr.ALSOr_1_0 returns ALSReference
	 *     ALSIff returns ALSReference
	 *     ALSIff.ALSIff_1_0 returns ALSReference
	 *     ALSImpl returns ALSReference
	 *     ALSImpl.ALSImpl_1_0 returns ALSReference
	 *     ALSAnd returns ALSReference
	 *     ALSAnd.ALSAnd_1_0 returns ALSReference
	 *     ALSComparison returns ALSReference
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSReference
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSReference
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSReference
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSReference
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSReference
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSReference
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSReference
	 *     ALSOverride returns ALSReference
	 *     ALSOverride.ALSOverride_1_0 returns ALSReference
	 *     ALSRangeRestrictionRight returns ALSReference
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSReference
	 *     ALSRangeRestrictionLeft returns ALSReference
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSReference
	 *     ALSJoin returns ALSReference
	 *     ALSJoin.ALSJoin_1_0 returns ALSReference
	 *     ALSMinus returns ALSReference
	 *     ALSMinus.ALSMinus_1_0 returns ALSReference
	 *     ALSPlus returns ALSReference
	 *     ALSPlus.ALSPlus_1_0 returns ALSReference
	 *     ALSIntersection returns ALSReference
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSReference
	 *     ALSDirectProduct returns ALSReference
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSReference
	 *     ALSPreficed returns ALSReference
	 *     ALSBasicRelationTerm returns ALSReference
	 *
	 * Constraint:
	 *     referred=[ALSRelationDeclaration|ID]
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_REFERENCE__REFERRED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_REFERENCE__REFERRED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSBasicRelationTermAccess().getReferredALSRelationDeclarationIDTerminalRuleCall_5_1_0_1(), semanticObject.eGet(AlloyLanguagePackage.Literals.ALS_REFERENCE__REFERRED, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSString
	 *     ALSQuantified returns ALSString
	 *     ALSOr returns ALSString
	 *     ALSOr.ALSOr_1_0 returns ALSString
	 *     ALSIff returns ALSString
	 *     ALSIff.ALSIff_1_0 returns ALSString
	 *     ALSImpl returns ALSString
	 *     ALSImpl.ALSImpl_1_0 returns ALSString
	 *     ALSAnd returns ALSString
	 *     ALSAnd.ALSAnd_1_0 returns ALSString
	 *     ALSComparison returns ALSString
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSString
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSString
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSString
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSString
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSString
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSString
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSString
	 *     ALSOverride returns ALSString
	 *     ALSOverride.ALSOverride_1_0 returns ALSString
	 *     ALSRangeRestrictionRight returns ALSString
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSString
	 *     ALSRangeRestrictionLeft returns ALSString
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSString
	 *     ALSJoin returns ALSString
	 *     ALSJoin.ALSJoin_1_0 returns ALSString
	 *     ALSMinus returns ALSString
	 *     ALSMinus.ALSMinus_1_0 returns ALSString
	 *     ALSPlus returns ALSString
	 *     ALSPlus.ALSPlus_1_0 returns ALSString
	 *     ALSIntersection returns ALSString
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSString
	 *     ALSDirectProduct returns ALSString
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSString
	 *     ALSPreficed returns ALSString
	 *     ALSBasicRelationTerm returns ALSString
	 *
	 * Constraint:
	 *     {ALSString}
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSStringLiteral
	 *     ALSQuantified returns ALSStringLiteral
	 *     ALSOr returns ALSStringLiteral
	 *     ALSOr.ALSOr_1_0 returns ALSStringLiteral
	 *     ALSIff returns ALSStringLiteral
	 *     ALSIff.ALSIff_1_0 returns ALSStringLiteral
	 *     ALSImpl returns ALSStringLiteral
	 *     ALSImpl.ALSImpl_1_0 returns ALSStringLiteral
	 *     ALSAnd returns ALSStringLiteral
	 *     ALSAnd.ALSAnd_1_0 returns ALSStringLiteral
	 *     ALSComparison returns ALSStringLiteral
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSStringLiteral
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSStringLiteral
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSStringLiteral
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSStringLiteral
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSStringLiteral
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSStringLiteral
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSStringLiteral
	 *     ALSOverride returns ALSStringLiteral
	 *     ALSOverride.ALSOverride_1_0 returns ALSStringLiteral
	 *     ALSRangeRestrictionRight returns ALSStringLiteral
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSStringLiteral
	 *     ALSRangeRestrictionLeft returns ALSStringLiteral
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSStringLiteral
	 *     ALSJoin returns ALSStringLiteral
	 *     ALSJoin.ALSJoin_1_0 returns ALSStringLiteral
	 *     ALSMinus returns ALSStringLiteral
	 *     ALSMinus.ALSMinus_1_0 returns ALSStringLiteral
	 *     ALSPlus returns ALSStringLiteral
	 *     ALSPlus.ALSPlus_1_0 returns ALSStringLiteral
	 *     ALSIntersection returns ALSStringLiteral
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSStringLiteral
	 *     ALSDirectProduct returns ALSStringLiteral
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSStringLiteral
	 *     ALSPreficed returns ALSStringLiteral
	 *     ALSBasicRelationTerm returns ALSStringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSBasicRelationTermAccess().getValueSTRINGTerminalRuleCall_7_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSUniv
	 *     ALSQuantified returns ALSUniv
	 *     ALSOr returns ALSUniv
	 *     ALSOr.ALSOr_1_0 returns ALSUniv
	 *     ALSIff returns ALSUniv
	 *     ALSIff.ALSIff_1_0 returns ALSUniv
	 *     ALSImpl returns ALSUniv
	 *     ALSImpl.ALSImpl_1_0 returns ALSUniv
	 *     ALSAnd returns ALSUniv
	 *     ALSAnd.ALSAnd_1_0 returns ALSUniv
	 *     ALSComparison returns ALSUniv
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSUniv
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSUniv
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSUniv
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSUniv
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSUniv
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSUniv
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSUniv
	 *     ALSOverride returns ALSUniv
	 *     ALSOverride.ALSOverride_1_0 returns ALSUniv
	 *     ALSRangeRestrictionRight returns ALSUniv
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSUniv
	 *     ALSRangeRestrictionLeft returns ALSUniv
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSUniv
	 *     ALSJoin returns ALSUniv
	 *     ALSJoin.ALSJoin_1_0 returns ALSUniv
	 *     ALSMinus returns ALSUniv
	 *     ALSMinus.ALSMinus_1_0 returns ALSUniv
	 *     ALSPlus returns ALSUniv
	 *     ALSPlus.ALSPlus_1_0 returns ALSUniv
	 *     ALSIntersection returns ALSUniv
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSUniv
	 *     ALSDirectProduct returns ALSUniv
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSUniv
	 *     ALSPreficed returns ALSUniv
	 *     ALSBasicRelationTerm returns ALSUniv
	 *
	 * Constraint:
	 *     {ALSUniv}
	 */
	protected void sequence_ALSBasicRelationTerm(ISerializationContext context, ALSUniv semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSEquals
	 *     ALSQuantified returns ALSEquals
	 *     ALSOr returns ALSEquals
	 *     ALSOr.ALSOr_1_0 returns ALSEquals
	 *     ALSIff returns ALSEquals
	 *     ALSIff.ALSIff_1_0 returns ALSEquals
	 *     ALSImpl returns ALSEquals
	 *     ALSImpl.ALSImpl_1_0 returns ALSEquals
	 *     ALSAnd returns ALSEquals
	 *     ALSAnd.ALSAnd_1_0 returns ALSEquals
	 *     ALSComparison returns ALSEquals
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSEquals
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSEquals
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSEquals
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSEquals
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSEquals
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSEquals
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSEquals
	 *     ALSOverride returns ALSEquals
	 *     ALSOverride.ALSOverride_1_0 returns ALSEquals
	 *     ALSRangeRestrictionRight returns ALSEquals
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSEquals
	 *     ALSRangeRestrictionLeft returns ALSEquals
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSEquals
	 *     ALSJoin returns ALSEquals
	 *     ALSJoin.ALSJoin_1_0 returns ALSEquals
	 *     ALSMinus returns ALSEquals
	 *     ALSMinus.ALSMinus_1_0 returns ALSEquals
	 *     ALSPlus returns ALSEquals
	 *     ALSPlus.ALSPlus_1_0 returns ALSEquals
	 *     ALSIntersection returns ALSEquals
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSEquals
	 *     ALSDirectProduct returns ALSEquals
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSEquals
	 *     ALSPreficed returns ALSEquals
	 *     ALSBasicRelationTerm returns ALSEquals
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSEquals_1_0_0_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSEquals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_EQUALS__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_EQUALS__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_EQUALS__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_EQUALS__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSEqualsLeftOperandAction_1_0_0_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSLeq
	 *     ALSQuantified returns ALSLeq
	 *     ALSOr returns ALSLeq
	 *     ALSOr.ALSOr_1_0 returns ALSLeq
	 *     ALSIff returns ALSLeq
	 *     ALSIff.ALSIff_1_0 returns ALSLeq
	 *     ALSImpl returns ALSLeq
	 *     ALSImpl.ALSImpl_1_0 returns ALSLeq
	 *     ALSAnd returns ALSLeq
	 *     ALSAnd.ALSAnd_1_0 returns ALSLeq
	 *     ALSComparison returns ALSLeq
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSLeq
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSLeq
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSLeq
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSLeq
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSLeq
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSLeq
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSLeq
	 *     ALSOverride returns ALSLeq
	 *     ALSOverride.ALSOverride_1_0 returns ALSLeq
	 *     ALSRangeRestrictionRight returns ALSLeq
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSLeq
	 *     ALSRangeRestrictionLeft returns ALSLeq
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSLeq
	 *     ALSJoin returns ALSLeq
	 *     ALSJoin.ALSJoin_1_0 returns ALSLeq
	 *     ALSMinus returns ALSLeq
	 *     ALSMinus.ALSMinus_1_0 returns ALSLeq
	 *     ALSPlus returns ALSLeq
	 *     ALSPlus.ALSPlus_1_0 returns ALSLeq
	 *     ALSIntersection returns ALSLeq
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSLeq
	 *     ALSDirectProduct returns ALSLeq
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSLeq
	 *     ALSPreficed returns ALSLeq
	 *     ALSBasicRelationTerm returns ALSLeq
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSLeq_1_0_4_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSLeq semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_LEQ__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_LEQ__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_LEQ__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_LEQ__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSLeqLeftOperandAction_1_0_4_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSLess
	 *     ALSQuantified returns ALSLess
	 *     ALSOr returns ALSLess
	 *     ALSOr.ALSOr_1_0 returns ALSLess
	 *     ALSIff returns ALSLess
	 *     ALSIff.ALSIff_1_0 returns ALSLess
	 *     ALSImpl returns ALSLess
	 *     ALSImpl.ALSImpl_1_0 returns ALSLess
	 *     ALSAnd returns ALSLess
	 *     ALSAnd.ALSAnd_1_0 returns ALSLess
	 *     ALSComparison returns ALSLess
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSLess
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSLess
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSLess
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSLess
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSLess
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSLess
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSLess
	 *     ALSOverride returns ALSLess
	 *     ALSOverride.ALSOverride_1_0 returns ALSLess
	 *     ALSRangeRestrictionRight returns ALSLess
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSLess
	 *     ALSRangeRestrictionLeft returns ALSLess
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSLess
	 *     ALSJoin returns ALSLess
	 *     ALSJoin.ALSJoin_1_0 returns ALSLess
	 *     ALSMinus returns ALSLess
	 *     ALSMinus.ALSMinus_1_0 returns ALSLess
	 *     ALSPlus returns ALSLess
	 *     ALSPlus.ALSPlus_1_0 returns ALSLess
	 *     ALSIntersection returns ALSLess
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSLess
	 *     ALSDirectProduct returns ALSLess
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSLess
	 *     ALSPreficed returns ALSLess
	 *     ALSBasicRelationTerm returns ALSLess
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSLess_1_0_3_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSLess semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_LESS__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_LESS__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_LESS__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_LESS__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSLessLeftOperandAction_1_0_3_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSMeq
	 *     ALSQuantified returns ALSMeq
	 *     ALSOr returns ALSMeq
	 *     ALSOr.ALSOr_1_0 returns ALSMeq
	 *     ALSIff returns ALSMeq
	 *     ALSIff.ALSIff_1_0 returns ALSMeq
	 *     ALSImpl returns ALSMeq
	 *     ALSImpl.ALSImpl_1_0 returns ALSMeq
	 *     ALSAnd returns ALSMeq
	 *     ALSAnd.ALSAnd_1_0 returns ALSMeq
	 *     ALSComparison returns ALSMeq
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSMeq
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSMeq
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSMeq
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSMeq
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSMeq
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSMeq
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSMeq
	 *     ALSOverride returns ALSMeq
	 *     ALSOverride.ALSOverride_1_0 returns ALSMeq
	 *     ALSRangeRestrictionRight returns ALSMeq
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSMeq
	 *     ALSRangeRestrictionLeft returns ALSMeq
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSMeq
	 *     ALSJoin returns ALSMeq
	 *     ALSJoin.ALSJoin_1_0 returns ALSMeq
	 *     ALSMinus returns ALSMeq
	 *     ALSMinus.ALSMinus_1_0 returns ALSMeq
	 *     ALSPlus returns ALSMeq
	 *     ALSPlus.ALSPlus_1_0 returns ALSMeq
	 *     ALSIntersection returns ALSMeq
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSMeq
	 *     ALSDirectProduct returns ALSMeq
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSMeq
	 *     ALSPreficed returns ALSMeq
	 *     ALSBasicRelationTerm returns ALSMeq
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSMeq_1_0_6_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSMeq semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MEQ__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MEQ__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MEQ__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MEQ__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSMeqLeftOperandAction_1_0_6_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSMore
	 *     ALSQuantified returns ALSMore
	 *     ALSOr returns ALSMore
	 *     ALSOr.ALSOr_1_0 returns ALSMore
	 *     ALSIff returns ALSMore
	 *     ALSIff.ALSIff_1_0 returns ALSMore
	 *     ALSImpl returns ALSMore
	 *     ALSImpl.ALSImpl_1_0 returns ALSMore
	 *     ALSAnd returns ALSMore
	 *     ALSAnd.ALSAnd_1_0 returns ALSMore
	 *     ALSComparison returns ALSMore
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSMore
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSMore
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSMore
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSMore
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSMore
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSMore
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSMore
	 *     ALSOverride returns ALSMore
	 *     ALSOverride.ALSOverride_1_0 returns ALSMore
	 *     ALSRangeRestrictionRight returns ALSMore
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSMore
	 *     ALSRangeRestrictionLeft returns ALSMore
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSMore
	 *     ALSJoin returns ALSMore
	 *     ALSJoin.ALSJoin_1_0 returns ALSMore
	 *     ALSMinus returns ALSMore
	 *     ALSMinus.ALSMinus_1_0 returns ALSMore
	 *     ALSPlus returns ALSMore
	 *     ALSPlus.ALSPlus_1_0 returns ALSMore
	 *     ALSIntersection returns ALSMore
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSMore
	 *     ALSDirectProduct returns ALSMore
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSMore
	 *     ALSPreficed returns ALSMore
	 *     ALSBasicRelationTerm returns ALSMore
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSMore_1_0_5_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSMore semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MORE__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MORE__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MORE__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MORE__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSMoreLeftOperandAction_1_0_5_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSNotEquals
	 *     ALSQuantified returns ALSNotEquals
	 *     ALSOr returns ALSNotEquals
	 *     ALSOr.ALSOr_1_0 returns ALSNotEquals
	 *     ALSIff returns ALSNotEquals
	 *     ALSIff.ALSIff_1_0 returns ALSNotEquals
	 *     ALSImpl returns ALSNotEquals
	 *     ALSImpl.ALSImpl_1_0 returns ALSNotEquals
	 *     ALSAnd returns ALSNotEquals
	 *     ALSAnd.ALSAnd_1_0 returns ALSNotEquals
	 *     ALSComparison returns ALSNotEquals
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSNotEquals
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSNotEquals
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSNotEquals
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSNotEquals
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSNotEquals
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSNotEquals
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSNotEquals
	 *     ALSOverride returns ALSNotEquals
	 *     ALSOverride.ALSOverride_1_0 returns ALSNotEquals
	 *     ALSRangeRestrictionRight returns ALSNotEquals
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSNotEquals
	 *     ALSRangeRestrictionLeft returns ALSNotEquals
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSNotEquals
	 *     ALSJoin returns ALSNotEquals
	 *     ALSJoin.ALSJoin_1_0 returns ALSNotEquals
	 *     ALSMinus returns ALSNotEquals
	 *     ALSMinus.ALSMinus_1_0 returns ALSNotEquals
	 *     ALSPlus returns ALSNotEquals
	 *     ALSPlus.ALSPlus_1_0 returns ALSNotEquals
	 *     ALSIntersection returns ALSNotEquals
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSNotEquals
	 *     ALSDirectProduct returns ALSNotEquals
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSNotEquals
	 *     ALSPreficed returns ALSNotEquals
	 *     ALSBasicRelationTerm returns ALSNotEquals
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSNotEquals_1_0_1_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSNotEquals semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT_EQUALS__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT_EQUALS__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT_EQUALS__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT_EQUALS__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSNotEqualsLeftOperandAction_1_0_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSSubset
	 *     ALSQuantified returns ALSSubset
	 *     ALSOr returns ALSSubset
	 *     ALSOr.ALSOr_1_0 returns ALSSubset
	 *     ALSIff returns ALSSubset
	 *     ALSIff.ALSIff_1_0 returns ALSSubset
	 *     ALSImpl returns ALSSubset
	 *     ALSImpl.ALSImpl_1_0 returns ALSSubset
	 *     ALSAnd returns ALSSubset
	 *     ALSAnd.ALSAnd_1_0 returns ALSSubset
	 *     ALSComparison returns ALSSubset
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSSubset
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSSubset
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSSubset
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSSubset
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSSubset
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSSubset
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSSubset
	 *     ALSOverride returns ALSSubset
	 *     ALSOverride.ALSOverride_1_0 returns ALSSubset
	 *     ALSRangeRestrictionRight returns ALSSubset
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSSubset
	 *     ALSRangeRestrictionLeft returns ALSSubset
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSSubset
	 *     ALSJoin returns ALSSubset
	 *     ALSJoin.ALSJoin_1_0 returns ALSSubset
	 *     ALSMinus returns ALSSubset
	 *     ALSMinus.ALSMinus_1_0 returns ALSSubset
	 *     ALSPlus returns ALSSubset
	 *     ALSPlus.ALSPlus_1_0 returns ALSSubset
	 *     ALSIntersection returns ALSSubset
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSSubset
	 *     ALSDirectProduct returns ALSSubset
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSSubset
	 *     ALSPreficed returns ALSSubset
	 *     ALSBasicRelationTerm returns ALSSubset
	 *
	 * Constraint:
	 *     (leftOperand=ALSComparison_ALSSubset_1_0_2_0 rightOperand=ALSOverride)
	 */
	protected void sequence_ALSComparison(ISerializationContext context, ALSSubset semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_SUBSET__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_SUBSET__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_SUBSET__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_SUBSET__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSComparisonAccess().getALSSubsetLeftOperandAction_1_0_2_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSComparisonAccess().getRightOperandALSOverrideParserRuleCall_1_1_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSDirectProduct
	 *     ALSQuantified returns ALSDirectProduct
	 *     ALSOr returns ALSDirectProduct
	 *     ALSOr.ALSOr_1_0 returns ALSDirectProduct
	 *     ALSIff returns ALSDirectProduct
	 *     ALSIff.ALSIff_1_0 returns ALSDirectProduct
	 *     ALSImpl returns ALSDirectProduct
	 *     ALSImpl.ALSImpl_1_0 returns ALSDirectProduct
	 *     ALSAnd returns ALSDirectProduct
	 *     ALSAnd.ALSAnd_1_0 returns ALSDirectProduct
	 *     ALSComparison returns ALSDirectProduct
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSDirectProduct
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSDirectProduct
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSDirectProduct
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSDirectProduct
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSDirectProduct
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSDirectProduct
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSDirectProduct
	 *     ALSOverride returns ALSDirectProduct
	 *     ALSOverride.ALSOverride_1_0 returns ALSDirectProduct
	 *     ALSRangeRestrictionRight returns ALSDirectProduct
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSDirectProduct
	 *     ALSRangeRestrictionLeft returns ALSDirectProduct
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSDirectProduct
	 *     ALSJoin returns ALSDirectProduct
	 *     ALSJoin.ALSJoin_1_0 returns ALSDirectProduct
	 *     ALSMinus returns ALSDirectProduct
	 *     ALSMinus.ALSMinus_1_0 returns ALSDirectProduct
	 *     ALSPlus returns ALSDirectProduct
	 *     ALSPlus.ALSPlus_1_0 returns ALSDirectProduct
	 *     ALSIntersection returns ALSDirectProduct
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSDirectProduct
	 *     ALSDirectProduct returns ALSDirectProduct
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSDirectProduct
	 *     ALSPreficed returns ALSDirectProduct
	 *     ALSBasicRelationTerm returns ALSDirectProduct
	 *
	 * Constraint:
	 *     (leftOperand=ALSDirectProduct_ALSDirectProduct_1_0 leftMultiplicit=ALSMultiplicity? rightMultiplicit=ALSMultiplicity? rightOperand=ALSPreficed)
	 */
	protected void sequence_ALSDirectProduct(ISerializationContext context, ALSDirectProduct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSDocument returns ALSDocument
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             enumDeclarations+=ALSEnumDeclaration | 
	 *             signatureBodies+=ALSSignatureBody | 
	 *             functionDefinitions+=ALSFunctionDefinition | 
	 *             relationDefinitions+=ALSRelationDefinition | 
	 *             factDeclarations+=ALSFactDeclaration
	 *         )+ 
	 *         runCommand=ALSRunCommand
	 *     )
	 */
	protected void sequence_ALSDocument(ISerializationContext context, ALSDocument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSRelationDeclaration returns ALSEnumDeclaration
	 *     ALSTypeDeclaration returns ALSEnumDeclaration
	 *     ALSEnumDeclaration returns ALSEnumDeclaration
	 *
	 * Constraint:
	 *     (name=ALSID literal+=ALSEnumLiteral literal+=ALSEnumLiteral*)
	 */
	protected void sequence_ALSEnumDeclaration(ISerializationContext context, ALSEnumDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSRelationDeclaration returns ALSEnumLiteral
	 *     ALSEnumLiteral returns ALSEnumLiteral
	 *
	 * Constraint:
	 *     name=ALSID
	 */
	protected void sequence_ALSEnumLiteral(ISerializationContext context, ALSEnumLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSEnumLiteralAccess().getNameALSIDParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSFactDeclaration returns ALSFactDeclaration
	 *
	 * Constraint:
	 *     (name=ALSID? term=ALSTerm)
	 */
	protected void sequence_ALSFactDeclaration(ISerializationContext context, ALSFactDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSRelationDeclaration returns ALSFieldDeclaration
	 *     ALSFieldDeclaration returns ALSFieldDeclaration
	 *
	 * Constraint:
	 *     (name=ALSID multiplicity=ALSMultiplicity? type=ALSTerm)
	 */
	protected void sequence_ALSFieldDeclaration(ISerializationContext context, ALSFieldDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSDefinition returns ALSFunctionDefinition
	 *     ALSFunctionDefinition returns ALSFunctionDefinition
	 *
	 * Constraint:
	 *     (name=ALSID variables+=ALSVariableDeclaration variables+=ALSVariableDeclaration* type=ALSTerm value=ALSTerm)
	 */
	protected void sequence_ALSFunctionDefinition(ISerializationContext context, ALSFunctionDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSIff
	 *     ALSQuantified returns ALSIff
	 *     ALSOr returns ALSIff
	 *     ALSOr.ALSOr_1_0 returns ALSIff
	 *     ALSIff returns ALSIff
	 *     ALSIff.ALSIff_1_0 returns ALSIff
	 *     ALSImpl returns ALSIff
	 *     ALSImpl.ALSImpl_1_0 returns ALSIff
	 *     ALSAnd returns ALSIff
	 *     ALSAnd.ALSAnd_1_0 returns ALSIff
	 *     ALSComparison returns ALSIff
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSIff
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSIff
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSIff
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSIff
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSIff
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSIff
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSIff
	 *     ALSOverride returns ALSIff
	 *     ALSOverride.ALSOverride_1_0 returns ALSIff
	 *     ALSRangeRestrictionRight returns ALSIff
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSIff
	 *     ALSRangeRestrictionLeft returns ALSIff
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSIff
	 *     ALSJoin returns ALSIff
	 *     ALSJoin.ALSJoin_1_0 returns ALSIff
	 *     ALSMinus returns ALSIff
	 *     ALSMinus.ALSMinus_1_0 returns ALSIff
	 *     ALSPlus returns ALSIff
	 *     ALSPlus.ALSPlus_1_0 returns ALSIff
	 *     ALSIntersection returns ALSIff
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSIff
	 *     ALSDirectProduct returns ALSIff
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSIff
	 *     ALSPreficed returns ALSIff
	 *     ALSBasicRelationTerm returns ALSIff
	 *
	 * Constraint:
	 *     (leftOperand=ALSIff_ALSIff_1_0 rightOperand=ALSImpl)
	 */
	protected void sequence_ALSIff(ISerializationContext context, ALSIff semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_IFF__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_IFF__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_IFF__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_IFF__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSIffAccess().getALSIffLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSIffAccess().getRightOperandALSImplParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSImpl
	 *     ALSQuantified returns ALSImpl
	 *     ALSOr returns ALSImpl
	 *     ALSOr.ALSOr_1_0 returns ALSImpl
	 *     ALSIff returns ALSImpl
	 *     ALSIff.ALSIff_1_0 returns ALSImpl
	 *     ALSImpl returns ALSImpl
	 *     ALSImpl.ALSImpl_1_0 returns ALSImpl
	 *     ALSAnd returns ALSImpl
	 *     ALSAnd.ALSAnd_1_0 returns ALSImpl
	 *     ALSComparison returns ALSImpl
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSImpl
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSImpl
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSImpl
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSImpl
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSImpl
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSImpl
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSImpl
	 *     ALSOverride returns ALSImpl
	 *     ALSOverride.ALSOverride_1_0 returns ALSImpl
	 *     ALSRangeRestrictionRight returns ALSImpl
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSImpl
	 *     ALSRangeRestrictionLeft returns ALSImpl
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSImpl
	 *     ALSJoin returns ALSImpl
	 *     ALSJoin.ALSJoin_1_0 returns ALSImpl
	 *     ALSMinus returns ALSImpl
	 *     ALSMinus.ALSMinus_1_0 returns ALSImpl
	 *     ALSPlus returns ALSImpl
	 *     ALSPlus.ALSPlus_1_0 returns ALSImpl
	 *     ALSIntersection returns ALSImpl
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSImpl
	 *     ALSDirectProduct returns ALSImpl
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSImpl
	 *     ALSPreficed returns ALSImpl
	 *     ALSBasicRelationTerm returns ALSImpl
	 *
	 * Constraint:
	 *     (leftOperand=ALSImpl_ALSImpl_1_0 rightOperand=ALSAnd elseOperand=ALSAnd?)
	 */
	protected void sequence_ALSImpl(ISerializationContext context, ALSImpl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTypeScope returns ALSIntScope
	 *     ALSIntScope returns ALSIntScope
	 *
	 * Constraint:
	 *     number=INT
	 */
	protected void sequence_ALSIntScope(ISerializationContext context, ALSIntScope semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_TYPE_SCOPE__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_TYPE_SCOPE__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSIntScopeAccess().getNumberINTTerminalRuleCall_0_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSIntersection
	 *     ALSQuantified returns ALSIntersection
	 *     ALSOr returns ALSIntersection
	 *     ALSOr.ALSOr_1_0 returns ALSIntersection
	 *     ALSIff returns ALSIntersection
	 *     ALSIff.ALSIff_1_0 returns ALSIntersection
	 *     ALSImpl returns ALSIntersection
	 *     ALSImpl.ALSImpl_1_0 returns ALSIntersection
	 *     ALSAnd returns ALSIntersection
	 *     ALSAnd.ALSAnd_1_0 returns ALSIntersection
	 *     ALSComparison returns ALSIntersection
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSIntersection
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSIntersection
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSIntersection
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSIntersection
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSIntersection
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSIntersection
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSIntersection
	 *     ALSOverride returns ALSIntersection
	 *     ALSOverride.ALSOverride_1_0 returns ALSIntersection
	 *     ALSRangeRestrictionRight returns ALSIntersection
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSIntersection
	 *     ALSRangeRestrictionLeft returns ALSIntersection
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSIntersection
	 *     ALSJoin returns ALSIntersection
	 *     ALSJoin.ALSJoin_1_0 returns ALSIntersection
	 *     ALSMinus returns ALSIntersection
	 *     ALSMinus.ALSMinus_1_0 returns ALSIntersection
	 *     ALSPlus returns ALSIntersection
	 *     ALSPlus.ALSPlus_1_0 returns ALSIntersection
	 *     ALSIntersection returns ALSIntersection
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSIntersection
	 *     ALSDirectProduct returns ALSIntersection
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSIntersection
	 *     ALSPreficed returns ALSIntersection
	 *     ALSBasicRelationTerm returns ALSIntersection
	 *
	 * Constraint:
	 *     (leftOperand=ALSIntersection_ALSIntersection_1_0 rightOperand=ALSDirectProduct)
	 */
	protected void sequence_ALSIntersection(ISerializationContext context, ALSIntersection semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_INTERSECTION__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_INTERSECTION__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_INTERSECTION__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_INTERSECTION__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSIntersectionAccess().getALSIntersectionLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSIntersectionAccess().getRightOperandALSDirectProductParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSJoin
	 *     ALSQuantified returns ALSJoin
	 *     ALSOr returns ALSJoin
	 *     ALSOr.ALSOr_1_0 returns ALSJoin
	 *     ALSIff returns ALSJoin
	 *     ALSIff.ALSIff_1_0 returns ALSJoin
	 *     ALSImpl returns ALSJoin
	 *     ALSImpl.ALSImpl_1_0 returns ALSJoin
	 *     ALSAnd returns ALSJoin
	 *     ALSAnd.ALSAnd_1_0 returns ALSJoin
	 *     ALSComparison returns ALSJoin
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSJoin
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSJoin
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSJoin
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSJoin
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSJoin
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSJoin
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSJoin
	 *     ALSOverride returns ALSJoin
	 *     ALSOverride.ALSOverride_1_0 returns ALSJoin
	 *     ALSRangeRestrictionRight returns ALSJoin
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSJoin
	 *     ALSRangeRestrictionLeft returns ALSJoin
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSJoin
	 *     ALSJoin returns ALSJoin
	 *     ALSJoin.ALSJoin_1_0 returns ALSJoin
	 *     ALSMinus returns ALSJoin
	 *     ALSMinus.ALSMinus_1_0 returns ALSJoin
	 *     ALSPlus returns ALSJoin
	 *     ALSPlus.ALSPlus_1_0 returns ALSJoin
	 *     ALSIntersection returns ALSJoin
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSJoin
	 *     ALSDirectProduct returns ALSJoin
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSJoin
	 *     ALSPreficed returns ALSJoin
	 *     ALSBasicRelationTerm returns ALSJoin
	 *
	 * Constraint:
	 *     (leftOperand=ALSJoin_ALSJoin_1_0 rightOperand=ALSMinus)
	 */
	protected void sequence_ALSJoin(ISerializationContext context, ALSJoin semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_JOIN__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_JOIN__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_JOIN__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_JOIN__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSJoinAccess().getALSJoinLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSJoinAccess().getRightOperandALSMinusParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSMinus
	 *     ALSQuantified returns ALSMinus
	 *     ALSOr returns ALSMinus
	 *     ALSOr.ALSOr_1_0 returns ALSMinus
	 *     ALSIff returns ALSMinus
	 *     ALSIff.ALSIff_1_0 returns ALSMinus
	 *     ALSImpl returns ALSMinus
	 *     ALSImpl.ALSImpl_1_0 returns ALSMinus
	 *     ALSAnd returns ALSMinus
	 *     ALSAnd.ALSAnd_1_0 returns ALSMinus
	 *     ALSComparison returns ALSMinus
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSMinus
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSMinus
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSMinus
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSMinus
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSMinus
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSMinus
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSMinus
	 *     ALSOverride returns ALSMinus
	 *     ALSOverride.ALSOverride_1_0 returns ALSMinus
	 *     ALSRangeRestrictionRight returns ALSMinus
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSMinus
	 *     ALSRangeRestrictionLeft returns ALSMinus
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSMinus
	 *     ALSJoin returns ALSMinus
	 *     ALSJoin.ALSJoin_1_0 returns ALSMinus
	 *     ALSMinus returns ALSMinus
	 *     ALSMinus.ALSMinus_1_0 returns ALSMinus
	 *     ALSPlus returns ALSMinus
	 *     ALSPlus.ALSPlus_1_0 returns ALSMinus
	 *     ALSIntersection returns ALSMinus
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSMinus
	 *     ALSDirectProduct returns ALSMinus
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSMinus
	 *     ALSPreficed returns ALSMinus
	 *     ALSBasicRelationTerm returns ALSMinus
	 *
	 * Constraint:
	 *     (leftOperand=ALSMinus_ALSMinus_1_0 rightOperand=ALSPlus)
	 */
	protected void sequence_ALSMinus(ISerializationContext context, ALSMinus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MINUS__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MINUS__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_MINUS__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_MINUS__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSMinusAccess().getALSMinusLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSMinusAccess().getRightOperandALSPlusParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSOr
	 *     ALSQuantified returns ALSOr
	 *     ALSOr returns ALSOr
	 *     ALSOr.ALSOr_1_0 returns ALSOr
	 *     ALSIff returns ALSOr
	 *     ALSIff.ALSIff_1_0 returns ALSOr
	 *     ALSImpl returns ALSOr
	 *     ALSImpl.ALSImpl_1_0 returns ALSOr
	 *     ALSAnd returns ALSOr
	 *     ALSAnd.ALSAnd_1_0 returns ALSOr
	 *     ALSComparison returns ALSOr
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSOr
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSOr
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSOr
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSOr
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSOr
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSOr
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSOr
	 *     ALSOverride returns ALSOr
	 *     ALSOverride.ALSOverride_1_0 returns ALSOr
	 *     ALSRangeRestrictionRight returns ALSOr
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSOr
	 *     ALSRangeRestrictionLeft returns ALSOr
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSOr
	 *     ALSJoin returns ALSOr
	 *     ALSJoin.ALSJoin_1_0 returns ALSOr
	 *     ALSMinus returns ALSOr
	 *     ALSMinus.ALSMinus_1_0 returns ALSOr
	 *     ALSPlus returns ALSOr
	 *     ALSPlus.ALSPlus_1_0 returns ALSOr
	 *     ALSIntersection returns ALSOr
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSOr
	 *     ALSDirectProduct returns ALSOr
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSOr
	 *     ALSPreficed returns ALSOr
	 *     ALSBasicRelationTerm returns ALSOr
	 *
	 * Constraint:
	 *     (leftOperand=ALSOr_ALSOr_1_0 rightOperand=ALSIff)
	 */
	protected void sequence_ALSOr(ISerializationContext context, ALSOr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_OR__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_OR__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_OR__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_OR__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSOrAccess().getALSOrLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSOrAccess().getRightOperandALSIffParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSOverride
	 *     ALSQuantified returns ALSOverride
	 *     ALSOr returns ALSOverride
	 *     ALSOr.ALSOr_1_0 returns ALSOverride
	 *     ALSIff returns ALSOverride
	 *     ALSIff.ALSIff_1_0 returns ALSOverride
	 *     ALSImpl returns ALSOverride
	 *     ALSImpl.ALSImpl_1_0 returns ALSOverride
	 *     ALSAnd returns ALSOverride
	 *     ALSAnd.ALSAnd_1_0 returns ALSOverride
	 *     ALSComparison returns ALSOverride
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSOverride
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSOverride
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSOverride
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSOverride
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSOverride
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSOverride
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSOverride
	 *     ALSOverride returns ALSOverride
	 *     ALSOverride.ALSOverride_1_0 returns ALSOverride
	 *     ALSRangeRestrictionRight returns ALSOverride
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSOverride
	 *     ALSRangeRestrictionLeft returns ALSOverride
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSOverride
	 *     ALSJoin returns ALSOverride
	 *     ALSJoin.ALSJoin_1_0 returns ALSOverride
	 *     ALSMinus returns ALSOverride
	 *     ALSMinus.ALSMinus_1_0 returns ALSOverride
	 *     ALSPlus returns ALSOverride
	 *     ALSPlus.ALSPlus_1_0 returns ALSOverride
	 *     ALSIntersection returns ALSOverride
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSOverride
	 *     ALSDirectProduct returns ALSOverride
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSOverride
	 *     ALSPreficed returns ALSOverride
	 *     ALSBasicRelationTerm returns ALSOverride
	 *
	 * Constraint:
	 *     (leftOperand=ALSOverride_ALSOverride_1_0 rightOperand=ALSRangeRestrictionRight)
	 */
	protected void sequence_ALSOverride(ISerializationContext context, ALSOverride semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_OVERRIDE__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_OVERRIDE__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_OVERRIDE__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_OVERRIDE__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSOverrideAccess().getALSOverrideLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSOverrideAccess().getRightOperandALSRangeRestrictionRightParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSPlus
	 *     ALSQuantified returns ALSPlus
	 *     ALSOr returns ALSPlus
	 *     ALSOr.ALSOr_1_0 returns ALSPlus
	 *     ALSIff returns ALSPlus
	 *     ALSIff.ALSIff_1_0 returns ALSPlus
	 *     ALSImpl returns ALSPlus
	 *     ALSImpl.ALSImpl_1_0 returns ALSPlus
	 *     ALSAnd returns ALSPlus
	 *     ALSAnd.ALSAnd_1_0 returns ALSPlus
	 *     ALSComparison returns ALSPlus
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSPlus
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSPlus
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSPlus
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSPlus
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSPlus
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSPlus
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSPlus
	 *     ALSOverride returns ALSPlus
	 *     ALSOverride.ALSOverride_1_0 returns ALSPlus
	 *     ALSRangeRestrictionRight returns ALSPlus
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSPlus
	 *     ALSRangeRestrictionLeft returns ALSPlus
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSPlus
	 *     ALSJoin returns ALSPlus
	 *     ALSJoin.ALSJoin_1_0 returns ALSPlus
	 *     ALSMinus returns ALSPlus
	 *     ALSMinus.ALSMinus_1_0 returns ALSPlus
	 *     ALSPlus returns ALSPlus
	 *     ALSPlus.ALSPlus_1_0 returns ALSPlus
	 *     ALSIntersection returns ALSPlus
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSPlus
	 *     ALSDirectProduct returns ALSPlus
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSPlus
	 *     ALSPreficed returns ALSPlus
	 *     ALSBasicRelationTerm returns ALSPlus
	 *
	 * Constraint:
	 *     (leftOperand=ALSPlus_ALSPlus_1_0 rightOperand=ALSIntersection)
	 */
	protected void sequence_ALSPlus(ISerializationContext context, ALSPlus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_PLUS__LEFT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_PLUS__LEFT_OPERAND));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_PLUS__RIGHT_OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_PLUS__RIGHT_OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPlusAccess().getALSPlusLeftOperandAction_1_0(), semanticObject.getLeftOperand());
		feeder.accept(grammarAccess.getALSPlusAccess().getRightOperandALSIntersectionParserRuleCall_1_2_0(), semanticObject.getRightOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSCardinality
	 *     ALSQuantified returns ALSCardinality
	 *     ALSOr returns ALSCardinality
	 *     ALSOr.ALSOr_1_0 returns ALSCardinality
	 *     ALSIff returns ALSCardinality
	 *     ALSIff.ALSIff_1_0 returns ALSCardinality
	 *     ALSImpl returns ALSCardinality
	 *     ALSImpl.ALSImpl_1_0 returns ALSCardinality
	 *     ALSAnd returns ALSCardinality
	 *     ALSAnd.ALSAnd_1_0 returns ALSCardinality
	 *     ALSComparison returns ALSCardinality
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSCardinality
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSCardinality
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSCardinality
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSCardinality
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSCardinality
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSCardinality
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSCardinality
	 *     ALSOverride returns ALSCardinality
	 *     ALSOverride.ALSOverride_1_0 returns ALSCardinality
	 *     ALSRangeRestrictionRight returns ALSCardinality
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSCardinality
	 *     ALSRangeRestrictionLeft returns ALSCardinality
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSCardinality
	 *     ALSJoin returns ALSCardinality
	 *     ALSJoin.ALSJoin_1_0 returns ALSCardinality
	 *     ALSMinus returns ALSCardinality
	 *     ALSMinus.ALSMinus_1_0 returns ALSCardinality
	 *     ALSPlus returns ALSCardinality
	 *     ALSPlus.ALSPlus_1_0 returns ALSCardinality
	 *     ALSIntersection returns ALSCardinality
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSCardinality
	 *     ALSDirectProduct returns ALSCardinality
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSCardinality
	 *     ALSPreficed returns ALSCardinality
	 *     ALSBasicRelationTerm returns ALSCardinality
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSCardinality semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_CARDINALITY__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_CARDINALITY__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_4_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSFunctionCall
	 *     ALSQuantified returns ALSFunctionCall
	 *     ALSOr returns ALSFunctionCall
	 *     ALSOr.ALSOr_1_0 returns ALSFunctionCall
	 *     ALSIff returns ALSFunctionCall
	 *     ALSIff.ALSIff_1_0 returns ALSFunctionCall
	 *     ALSImpl returns ALSFunctionCall
	 *     ALSImpl.ALSImpl_1_0 returns ALSFunctionCall
	 *     ALSAnd returns ALSFunctionCall
	 *     ALSAnd.ALSAnd_1_0 returns ALSFunctionCall
	 *     ALSComparison returns ALSFunctionCall
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSFunctionCall
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSFunctionCall
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSFunctionCall
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSFunctionCall
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSFunctionCall
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSFunctionCall
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSFunctionCall
	 *     ALSOverride returns ALSFunctionCall
	 *     ALSOverride.ALSOverride_1_0 returns ALSFunctionCall
	 *     ALSRangeRestrictionRight returns ALSFunctionCall
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSFunctionCall
	 *     ALSRangeRestrictionLeft returns ALSFunctionCall
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSFunctionCall
	 *     ALSJoin returns ALSFunctionCall
	 *     ALSJoin.ALSJoin_1_0 returns ALSFunctionCall
	 *     ALSMinus returns ALSFunctionCall
	 *     ALSMinus.ALSMinus_1_0 returns ALSFunctionCall
	 *     ALSPlus returns ALSFunctionCall
	 *     ALSPlus.ALSPlus_1_0 returns ALSFunctionCall
	 *     ALSIntersection returns ALSFunctionCall
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSFunctionCall
	 *     ALSDirectProduct returns ALSFunctionCall
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSFunctionCall
	 *     ALSPreficed returns ALSFunctionCall
	 *     ALSBasicRelationTerm returns ALSFunctionCall
	 *
	 * Constraint:
	 *     ((referredDefinition=[ALSDefinition|ID] | referredNumericOperator=ALSNumericOperator) params+=ALSTerm params+=ALSTerm*)
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSInverseRelation
	 *     ALSQuantified returns ALSInverseRelation
	 *     ALSOr returns ALSInverseRelation
	 *     ALSOr.ALSOr_1_0 returns ALSInverseRelation
	 *     ALSIff returns ALSInverseRelation
	 *     ALSIff.ALSIff_1_0 returns ALSInverseRelation
	 *     ALSImpl returns ALSInverseRelation
	 *     ALSImpl.ALSImpl_1_0 returns ALSInverseRelation
	 *     ALSAnd returns ALSInverseRelation
	 *     ALSAnd.ALSAnd_1_0 returns ALSInverseRelation
	 *     ALSComparison returns ALSInverseRelation
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSInverseRelation
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSInverseRelation
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSInverseRelation
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSInverseRelation
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSInverseRelation
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSInverseRelation
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSInverseRelation
	 *     ALSOverride returns ALSInverseRelation
	 *     ALSOverride.ALSOverride_1_0 returns ALSInverseRelation
	 *     ALSRangeRestrictionRight returns ALSInverseRelation
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSInverseRelation
	 *     ALSRangeRestrictionLeft returns ALSInverseRelation
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSInverseRelation
	 *     ALSJoin returns ALSInverseRelation
	 *     ALSJoin.ALSJoin_1_0 returns ALSInverseRelation
	 *     ALSMinus returns ALSInverseRelation
	 *     ALSMinus.ALSMinus_1_0 returns ALSInverseRelation
	 *     ALSPlus returns ALSInverseRelation
	 *     ALSPlus.ALSPlus_1_0 returns ALSInverseRelation
	 *     ALSIntersection returns ALSInverseRelation
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSInverseRelation
	 *     ALSDirectProduct returns ALSInverseRelation
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSInverseRelation
	 *     ALSPreficed returns ALSInverseRelation
	 *     ALSBasicRelationTerm returns ALSInverseRelation
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSInverseRelation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_INVERSE_RELATION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_INVERSE_RELATION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_1_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSNot
	 *     ALSQuantified returns ALSNot
	 *     ALSOr returns ALSNot
	 *     ALSOr.ALSOr_1_0 returns ALSNot
	 *     ALSIff returns ALSNot
	 *     ALSIff.ALSIff_1_0 returns ALSNot
	 *     ALSImpl returns ALSNot
	 *     ALSImpl.ALSImpl_1_0 returns ALSNot
	 *     ALSAnd returns ALSNot
	 *     ALSAnd.ALSAnd_1_0 returns ALSNot
	 *     ALSComparison returns ALSNot
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSNot
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSNot
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSNot
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSNot
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSNot
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSNot
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSNot
	 *     ALSOverride returns ALSNot
	 *     ALSOverride.ALSOverride_1_0 returns ALSNot
	 *     ALSRangeRestrictionRight returns ALSNot
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSNot
	 *     ALSRangeRestrictionLeft returns ALSNot
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSNot
	 *     ALSJoin returns ALSNot
	 *     ALSJoin.ALSJoin_1_0 returns ALSNot
	 *     ALSMinus returns ALSNot
	 *     ALSMinus.ALSMinus_1_0 returns ALSNot
	 *     ALSPlus returns ALSNot
	 *     ALSPlus.ALSPlus_1_0 returns ALSNot
	 *     ALSIntersection returns ALSNot
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSNot
	 *     ALSDirectProduct returns ALSNot
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSNot
	 *     ALSPreficed returns ALSNot
	 *     ALSBasicRelationTerm returns ALSNot
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSNot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_NOT__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_0_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSReflectiveTransitiveClosure
	 *     ALSQuantified returns ALSReflectiveTransitiveClosure
	 *     ALSOr returns ALSReflectiveTransitiveClosure
	 *     ALSOr.ALSOr_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSIff returns ALSReflectiveTransitiveClosure
	 *     ALSIff.ALSIff_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSImpl returns ALSReflectiveTransitiveClosure
	 *     ALSImpl.ALSImpl_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSAnd returns ALSReflectiveTransitiveClosure
	 *     ALSAnd.ALSAnd_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSReflectiveTransitiveClosure
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSReflectiveTransitiveClosure
	 *     ALSOverride returns ALSReflectiveTransitiveClosure
	 *     ALSOverride.ALSOverride_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSRangeRestrictionRight returns ALSReflectiveTransitiveClosure
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSRangeRestrictionLeft returns ALSReflectiveTransitiveClosure
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSJoin returns ALSReflectiveTransitiveClosure
	 *     ALSJoin.ALSJoin_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSMinus returns ALSReflectiveTransitiveClosure
	 *     ALSMinus.ALSMinus_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSPlus returns ALSReflectiveTransitiveClosure
	 *     ALSPlus.ALSPlus_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSIntersection returns ALSReflectiveTransitiveClosure
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSDirectProduct returns ALSReflectiveTransitiveClosure
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSReflectiveTransitiveClosure
	 *     ALSPreficed returns ALSReflectiveTransitiveClosure
	 *     ALSBasicRelationTerm returns ALSReflectiveTransitiveClosure
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSReflectiveTransitiveClosure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_REFLECTIVE_TRANSITIVE_CLOSURE__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_REFLECTIVE_TRANSITIVE_CLOSURE__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_3_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSSum
	 *     ALSQuantified returns ALSSum
	 *     ALSOr returns ALSSum
	 *     ALSOr.ALSOr_1_0 returns ALSSum
	 *     ALSIff returns ALSSum
	 *     ALSIff.ALSIff_1_0 returns ALSSum
	 *     ALSImpl returns ALSSum
	 *     ALSImpl.ALSImpl_1_0 returns ALSSum
	 *     ALSAnd returns ALSSum
	 *     ALSAnd.ALSAnd_1_0 returns ALSSum
	 *     ALSComparison returns ALSSum
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSSum
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSSum
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSSum
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSSum
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSSum
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSSum
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSSum
	 *     ALSOverride returns ALSSum
	 *     ALSOverride.ALSOverride_1_0 returns ALSSum
	 *     ALSRangeRestrictionRight returns ALSSum
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSSum
	 *     ALSRangeRestrictionLeft returns ALSSum
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSSum
	 *     ALSJoin returns ALSSum
	 *     ALSJoin.ALSJoin_1_0 returns ALSSum
	 *     ALSMinus returns ALSSum
	 *     ALSMinus.ALSMinus_1_0 returns ALSSum
	 *     ALSPlus returns ALSSum
	 *     ALSPlus.ALSPlus_1_0 returns ALSSum
	 *     ALSIntersection returns ALSSum
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSSum
	 *     ALSDirectProduct returns ALSSum
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSSum
	 *     ALSPreficed returns ALSSum
	 *     ALSBasicRelationTerm returns ALSSum
	 *
	 * Constraint:
	 *     (variables+=ALSVariableDeclaration variables+=ALSVariableDeclaration* expression=ALSTerm)
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSSum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSUnaryMinus
	 *     ALSQuantified returns ALSUnaryMinus
	 *     ALSOr returns ALSUnaryMinus
	 *     ALSOr.ALSOr_1_0 returns ALSUnaryMinus
	 *     ALSIff returns ALSUnaryMinus
	 *     ALSIff.ALSIff_1_0 returns ALSUnaryMinus
	 *     ALSImpl returns ALSUnaryMinus
	 *     ALSImpl.ALSImpl_1_0 returns ALSUnaryMinus
	 *     ALSAnd returns ALSUnaryMinus
	 *     ALSAnd.ALSAnd_1_0 returns ALSUnaryMinus
	 *     ALSComparison returns ALSUnaryMinus
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSUnaryMinus
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSUnaryMinus
	 *     ALSOverride returns ALSUnaryMinus
	 *     ALSOverride.ALSOverride_1_0 returns ALSUnaryMinus
	 *     ALSRangeRestrictionRight returns ALSUnaryMinus
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSUnaryMinus
	 *     ALSRangeRestrictionLeft returns ALSUnaryMinus
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSUnaryMinus
	 *     ALSJoin returns ALSUnaryMinus
	 *     ALSJoin.ALSJoin_1_0 returns ALSUnaryMinus
	 *     ALSMinus returns ALSUnaryMinus
	 *     ALSMinus.ALSMinus_1_0 returns ALSUnaryMinus
	 *     ALSPlus returns ALSUnaryMinus
	 *     ALSPlus.ALSPlus_1_0 returns ALSUnaryMinus
	 *     ALSIntersection returns ALSUnaryMinus
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSUnaryMinus
	 *     ALSDirectProduct returns ALSUnaryMinus
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSUnaryMinus
	 *     ALSPreficed returns ALSUnaryMinus
	 *     ALSBasicRelationTerm returns ALSUnaryMinus
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, ALSUnaryMinus semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_UNARY_MINUS__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_UNARY_MINUS__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_5_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns AlSTransitiveClosure
	 *     ALSQuantified returns AlSTransitiveClosure
	 *     ALSOr returns AlSTransitiveClosure
	 *     ALSOr.ALSOr_1_0 returns AlSTransitiveClosure
	 *     ALSIff returns AlSTransitiveClosure
	 *     ALSIff.ALSIff_1_0 returns AlSTransitiveClosure
	 *     ALSImpl returns AlSTransitiveClosure
	 *     ALSImpl.ALSImpl_1_0 returns AlSTransitiveClosure
	 *     ALSAnd returns AlSTransitiveClosure
	 *     ALSAnd.ALSAnd_1_0 returns AlSTransitiveClosure
	 *     ALSComparison returns AlSTransitiveClosure
	 *     ALSComparison.ALSEquals_1_0_0_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSSubset_1_0_2_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSLess_1_0_3_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSLeq_1_0_4_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSMore_1_0_5_0 returns AlSTransitiveClosure
	 *     ALSComparison.ALSMeq_1_0_6_0 returns AlSTransitiveClosure
	 *     ALSOverride returns AlSTransitiveClosure
	 *     ALSOverride.ALSOverride_1_0 returns AlSTransitiveClosure
	 *     ALSRangeRestrictionRight returns AlSTransitiveClosure
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns AlSTransitiveClosure
	 *     ALSRangeRestrictionLeft returns AlSTransitiveClosure
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns AlSTransitiveClosure
	 *     ALSJoin returns AlSTransitiveClosure
	 *     ALSJoin.ALSJoin_1_0 returns AlSTransitiveClosure
	 *     ALSMinus returns AlSTransitiveClosure
	 *     ALSMinus.ALSMinus_1_0 returns AlSTransitiveClosure
	 *     ALSPlus returns AlSTransitiveClosure
	 *     ALSPlus.ALSPlus_1_0 returns AlSTransitiveClosure
	 *     ALSIntersection returns AlSTransitiveClosure
	 *     ALSIntersection.ALSIntersection_1_0 returns AlSTransitiveClosure
	 *     ALSDirectProduct returns AlSTransitiveClosure
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns AlSTransitiveClosure
	 *     ALSPreficed returns AlSTransitiveClosure
	 *     ALSBasicRelationTerm returns AlSTransitiveClosure
	 *
	 * Constraint:
	 *     operand=ALSBasicRelationTerm
	 */
	protected void sequence_ALSPreficed(ISerializationContext context, AlSTransitiveClosure semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.AL_STRANSITIVE_CLOSURE__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.AL_STRANSITIVE_CLOSURE__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSPreficedAccess().getOperandALSBasicRelationTermParserRuleCall_2_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSQuantifiedEx
	 *     ALSQuantified returns ALSQuantifiedEx
	 *     ALSOr returns ALSQuantifiedEx
	 *     ALSOr.ALSOr_1_0 returns ALSQuantifiedEx
	 *     ALSIff returns ALSQuantifiedEx
	 *     ALSIff.ALSIff_1_0 returns ALSQuantifiedEx
	 *     ALSImpl returns ALSQuantifiedEx
	 *     ALSImpl.ALSImpl_1_0 returns ALSQuantifiedEx
	 *     ALSAnd returns ALSQuantifiedEx
	 *     ALSAnd.ALSAnd_1_0 returns ALSQuantifiedEx
	 *     ALSComparison returns ALSQuantifiedEx
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSQuantifiedEx
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSQuantifiedEx
	 *     ALSOverride returns ALSQuantifiedEx
	 *     ALSOverride.ALSOverride_1_0 returns ALSQuantifiedEx
	 *     ALSRangeRestrictionRight returns ALSQuantifiedEx
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSQuantifiedEx
	 *     ALSRangeRestrictionLeft returns ALSQuantifiedEx
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSQuantifiedEx
	 *     ALSJoin returns ALSQuantifiedEx
	 *     ALSJoin.ALSJoin_1_0 returns ALSQuantifiedEx
	 *     ALSMinus returns ALSQuantifiedEx
	 *     ALSMinus.ALSMinus_1_0 returns ALSQuantifiedEx
	 *     ALSPlus returns ALSQuantifiedEx
	 *     ALSPlus.ALSPlus_1_0 returns ALSQuantifiedEx
	 *     ALSIntersection returns ALSQuantifiedEx
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSQuantifiedEx
	 *     ALSDirectProduct returns ALSQuantifiedEx
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSQuantifiedEx
	 *     ALSPreficed returns ALSQuantifiedEx
	 *     ALSBasicRelationTerm returns ALSQuantifiedEx
	 *
	 * Constraint:
	 *     (type=ALSMultiplicity disj?='disj'? variables+=ALSVariableDeclaration variables+=ALSVariableDeclaration* expression=ALSTerm)
	 */
	protected void sequence_ALSQuantified(ISerializationContext context, ALSQuantifiedEx semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSRangeRestrictionLeft
	 *     ALSQuantified returns ALSRangeRestrictionLeft
	 *     ALSOr returns ALSRangeRestrictionLeft
	 *     ALSOr.ALSOr_1_0 returns ALSRangeRestrictionLeft
	 *     ALSIff returns ALSRangeRestrictionLeft
	 *     ALSIff.ALSIff_1_0 returns ALSRangeRestrictionLeft
	 *     ALSImpl returns ALSRangeRestrictionLeft
	 *     ALSImpl.ALSImpl_1_0 returns ALSRangeRestrictionLeft
	 *     ALSAnd returns ALSRangeRestrictionLeft
	 *     ALSAnd.ALSAnd_1_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSRangeRestrictionLeft
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSRangeRestrictionLeft
	 *     ALSOverride returns ALSRangeRestrictionLeft
	 *     ALSOverride.ALSOverride_1_0 returns ALSRangeRestrictionLeft
	 *     ALSRangeRestrictionRight returns ALSRangeRestrictionLeft
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSRangeRestrictionLeft
	 *     ALSRangeRestrictionLeft returns ALSRangeRestrictionLeft
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSRangeRestrictionLeft
	 *     ALSJoin returns ALSRangeRestrictionLeft
	 *     ALSJoin.ALSJoin_1_0 returns ALSRangeRestrictionLeft
	 *     ALSMinus returns ALSRangeRestrictionLeft
	 *     ALSMinus.ALSMinus_1_0 returns ALSRangeRestrictionLeft
	 *     ALSPlus returns ALSRangeRestrictionLeft
	 *     ALSPlus.ALSPlus_1_0 returns ALSRangeRestrictionLeft
	 *     ALSIntersection returns ALSRangeRestrictionLeft
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSRangeRestrictionLeft
	 *     ALSDirectProduct returns ALSRangeRestrictionLeft
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSRangeRestrictionLeft
	 *     ALSPreficed returns ALSRangeRestrictionLeft
	 *     ALSBasicRelationTerm returns ALSRangeRestrictionLeft
	 *
	 * Constraint:
	 *     (filter=ALSRangeRestrictionLeft_ALSRangeRestrictionLeft_1_0 relation=ALSJoin)
	 */
	protected void sequence_ALSRangeRestrictionLeft(ISerializationContext context, ALSRangeRestrictionLeft semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_LEFT__FILTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_LEFT__FILTER));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_LEFT__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_LEFT__RELATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSRangeRestrictionLeftAccess().getALSRangeRestrictionLeftFilterAction_1_0(), semanticObject.getFilter());
		feeder.accept(grammarAccess.getALSRangeRestrictionLeftAccess().getRelationALSJoinParserRuleCall_1_2_0(), semanticObject.getRelation());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTerm returns ALSRangeRestrictionRight
	 *     ALSQuantified returns ALSRangeRestrictionRight
	 *     ALSOr returns ALSRangeRestrictionRight
	 *     ALSOr.ALSOr_1_0 returns ALSRangeRestrictionRight
	 *     ALSIff returns ALSRangeRestrictionRight
	 *     ALSIff.ALSIff_1_0 returns ALSRangeRestrictionRight
	 *     ALSImpl returns ALSRangeRestrictionRight
	 *     ALSImpl.ALSImpl_1_0 returns ALSRangeRestrictionRight
	 *     ALSAnd returns ALSRangeRestrictionRight
	 *     ALSAnd.ALSAnd_1_0 returns ALSRangeRestrictionRight
	 *     ALSComparison returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSEquals_1_0_0_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSNotEquals_1_0_1_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSSubset_1_0_2_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSLess_1_0_3_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSLeq_1_0_4_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSMore_1_0_5_0 returns ALSRangeRestrictionRight
	 *     ALSComparison.ALSMeq_1_0_6_0 returns ALSRangeRestrictionRight
	 *     ALSOverride returns ALSRangeRestrictionRight
	 *     ALSOverride.ALSOverride_1_0 returns ALSRangeRestrictionRight
	 *     ALSRangeRestrictionRight returns ALSRangeRestrictionRight
	 *     ALSRangeRestrictionRight.ALSRangeRestrictionRight_1_0 returns ALSRangeRestrictionRight
	 *     ALSRangeRestrictionLeft returns ALSRangeRestrictionRight
	 *     ALSRangeRestrictionLeft.ALSRangeRestrictionLeft_1_0 returns ALSRangeRestrictionRight
	 *     ALSJoin returns ALSRangeRestrictionRight
	 *     ALSJoin.ALSJoin_1_0 returns ALSRangeRestrictionRight
	 *     ALSMinus returns ALSRangeRestrictionRight
	 *     ALSMinus.ALSMinus_1_0 returns ALSRangeRestrictionRight
	 *     ALSPlus returns ALSRangeRestrictionRight
	 *     ALSPlus.ALSPlus_1_0 returns ALSRangeRestrictionRight
	 *     ALSIntersection returns ALSRangeRestrictionRight
	 *     ALSIntersection.ALSIntersection_1_0 returns ALSRangeRestrictionRight
	 *     ALSDirectProduct returns ALSRangeRestrictionRight
	 *     ALSDirectProduct.ALSDirectProduct_1_0 returns ALSRangeRestrictionRight
	 *     ALSPreficed returns ALSRangeRestrictionRight
	 *     ALSBasicRelationTerm returns ALSRangeRestrictionRight
	 *
	 * Constraint:
	 *     (relation=ALSRangeRestrictionRight_ALSRangeRestrictionRight_1_0 filter=ALSRangeRestrictionLeft)
	 */
	protected void sequence_ALSRangeRestrictionRight(ISerializationContext context, ALSRangeRestrictionRight semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_RIGHT__RELATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_RIGHT__RELATION));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_RIGHT__FILTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RANGE_RESTRICTION_RIGHT__FILTER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSRangeRestrictionRightAccess().getALSRangeRestrictionRightRelationAction_1_0(), semanticObject.getRelation());
		feeder.accept(grammarAccess.getALSRangeRestrictionRightAccess().getFilterALSRangeRestrictionLeftParserRuleCall_1_2_0(), semanticObject.getFilter());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSDefinition returns ALSRelationDefinition
	 *     ALSRelationDefinition returns ALSRelationDefinition
	 *
	 * Constraint:
	 *     (name=ALSID variables+=ALSVariableDeclaration variables+=ALSVariableDeclaration* value=ALSTerm)
	 */
	protected void sequence_ALSRelationDefinition(ISerializationContext context, ALSRelationDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSRunCommand returns ALSRunCommand
	 *
	 * Constraint:
	 *     (typeScopes+=ALSTypeScope typeScopes+=ALSTypeScope*)?
	 */
	protected void sequence_ALSRunCommand(ISerializationContext context, ALSRunCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSTypeScope returns ALSSigScope
	 *     ALSSigScope returns ALSSigScope
	 *
	 * Constraint:
	 *     (exactly?='exactly'? number=INT type=[ALSSignatureDeclaration|ID])
	 */
	protected void sequence_ALSSigScope(ISerializationContext context, ALSSigScope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSSignatureBody returns ALSSignatureBody
	 *
	 * Constraint:
	 *     (
	 *         (multiplicity=ALSMultiplicity | abstract?='abstract')* 
	 *         declarations+=ALSSignatureDeclaration 
	 *         declarations+=ALSSignatureDeclaration* 
	 *         (supertype=[ALSSignatureDeclaration|ID] | (superset+=[ALSSignatureDeclaration|ID] superset+=[ALSSignatureDeclaration|ID]*))? 
	 *         (fields+=ALSFieldDeclaration fields+=ALSFieldDeclaration*)?
	 *     )
	 */
	protected void sequence_ALSSignatureBody(ISerializationContext context, ALSSignatureBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ALSRelationDeclaration returns ALSSignatureDeclaration
	 *     ALSTypeDeclaration returns ALSSignatureDeclaration
	 *     ALSSignatureDeclaration returns ALSSignatureDeclaration
	 *
	 * Constraint:
	 *     name=ALSID
	 */
	protected void sequence_ALSSignatureDeclaration(ISerializationContext context, ALSSignatureDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSSignatureDeclarationAccess().getNameALSIDParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSTypeScope returns ALSStringScope
	 *     ALSStringScope returns ALSStringScope
	 *
	 * Constraint:
	 *     number=INT
	 */
	protected void sequence_ALSStringScope(ISerializationContext context, ALSStringScope semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_TYPE_SCOPE__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_TYPE_SCOPE__NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSStringScopeAccess().getNumberINTTerminalRuleCall_1_0(), semanticObject.getNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ALSRelationDeclaration returns ALSVariableDeclaration
	 *     ALSVariableDeclaration returns ALSVariableDeclaration
	 *
	 * Constraint:
	 *     (name=ALSID range=ALSTerm)
	 */
	protected void sequence_ALSVariableDeclaration(ISerializationContext context, ALSVariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_RELATION_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, AlloyLanguagePackage.Literals.ALS_VARIABLE_DECLARATION__RANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AlloyLanguagePackage.Literals.ALS_VARIABLE_DECLARATION__RANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getALSVariableDeclarationAccess().getNameALSIDParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getALSVariableDeclarationAccess().getRangeALSTermParserRuleCall_2_0(), semanticObject.getRange());
		feeder.finish();
	}
	
	
}
